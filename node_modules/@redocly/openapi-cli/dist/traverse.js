"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _resolver = _interopRequireWildcard(require("./resolver"));

var _resolveDefinition = _interopRequireDefault(require("./resolveDefinition"));

var _resolveType = _interopRequireDefault(require("./resolveType"));

var _scalarsResolver = _interopRequireDefault(require("./scalarsResolver"));

var _default2 = require("./error/default");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-await-in-loop */

/* eslint-disable no-underscore-dangle */

/* eslint-disable no-case-declarations */
async function traverseChildren(resolvedNode, definition, ctx, visited) {
  let nodeChildren;
  const errors = [];

  switch (typeof definition.properties) {
    case 'function':
      nodeChildren = definition.properties(resolvedNode);
      const childrenNames = Object.keys(nodeChildren);
      const resolvedNodeKeys = Object.keys(resolvedNode);

      for (let i = 0; i < childrenNames.length; i += 1) {
        const child = childrenNames[i];
        let childResult = [];

        if (resolvedNodeKeys.includes(child)) {
          ctx.path.push(child);

          if (resolvedNode[child]) {
            childResult = await traverseNode(resolvedNode[child], nodeChildren[child], ctx, visited);
          }

          if (childResult) errors.push(...childResult);
          ctx.path.pop();
        }
      }

      break;

    case 'object':
      const props = Object.keys(definition.properties);

      for (let i = 0; i < props.length; i += 1) {
        const p = props[i];
        let propResult = [];
        ctx.path.push(p);

        if (typeof definition.properties[p] === 'function') {
          if (resolvedNode[p]) {
            propResult = await traverseNode(resolvedNode[p], definition.properties[p](resolvedNode[p]), ctx, visited);
          }
        } else if (resolvedNode[p]) {
          propResult = await traverseNode(resolvedNode[p], definition.properties[p], ctx, visited);
        }

        if (propResult) errors.push(...propResult);
        ctx.path.pop();
      }

      break;

    default: // do nothing

  }

  return errors;
}

async function onNodeEnter(node, ctx) {
  const {
    node: resolvedNode,
    onStack
  } = await (0, _resolver.default)(node, ctx);
  return {
    resolvedNode,
    onStack
  };
}

function onNodeExit(nodeContext, ctx) {
  if (nodeContext.onStack) {
    (0, _resolver.popPath)(ctx);
  }
}

const nestedIncludes = (c, s) => {
  const res = s.find(el => el === s) !== undefined;
  return res;
};

async function traverseNode(node, definition, ctx, visited = []) {
  if (!node || !definition) return [];
  const nodeContext = await onNodeEnter(node, ctx);
  const isRecursive = nestedIncludes(ctx.path, visited);
  const errors = [];
  const currentPath = `${_path.default.relative(process.cwd(), ctx.filePath)}::${ctx.path.join('/')}`;
  const localVisited = Array.from(visited);
  localVisited.push(currentPath);
  const resolvedDefinition = (0, _resolveDefinition.default)(definition, ctx, nodeContext.resolvedNode);
  ctx.definitionStack.push(resolvedDefinition);
  (0, _scalarsResolver.default)(nodeContext.resolvedNode, definition, ctx);

  if (definition.customResolveFields) {
    await definition.customResolveFields(nodeContext.resolvedNode, ctx, visited);
  }

  if (Array.isArray(nodeContext.resolvedNode)) {
    for (let i = 0; i < nodeContext.resolvedNode.length; i++) {
      ctx.path.push(i);
      const arrayResult = await traverseNode(nodeContext.resolvedNode[i], resolvedDefinition, ctx, localVisited);
      if (arrayResult) errors.push(...arrayResult);
      ctx.path.pop();
    }
  } else {
    ctx.validateFields = ctx.validateFieldsRaw.bind(null, nodeContext.resolvedNode, ctx);
    await runRuleOnRuleset(nodeContext, 'onEnter', ctx, resolvedDefinition, node, errors, localVisited);
    const newNode = !isRecursive && (!resolvedDefinition.isIdempotent || !ctx.visited.includes(currentPath));

    if (newNode) {
      if (!ctx.visited.includes(currentPath)) ctx.visited.push(currentPath);
      const errorsChildren = await traverseChildren(nodeContext.resolvedNode, resolvedDefinition, ctx, localVisited);
      errors.push(...errorsChildren);
    } else {
      // Will use cached result if we have already traversed this nodes children
      const cachedResult = ctx.cache[currentPath] ? ctx.cache[currentPath].map(r => (0, _default2.fromError)(r, ctx)) : [];
      ctx.result.push(...cachedResult);
    }

    await runRuleOnRuleset(nodeContext, 'onExit', ctx, resolvedDefinition, node, errors);
    if (newNode) ctx.cache[currentPath] = errors;
  }

  onNodeExit(nodeContext, ctx);
  ctx.definitionStack.pop();
  return errors;
}

async function runRuleOnRuleset(nodeContext, ruleName, ctx, definition, node, errors, visited) {
  for (let i = 0; i < ctx.customRules.length; i += 1) {
    ctx.validateFieldsHelper = ctx.validateFields.bind(null, ctx.customRules[i]._config, ctx.customRules[i].constructor.rule);
    ctx.createError = _default2.createErrorFlat.bind(null, nodeContext.resolvedNode, ctx, ctx.customRules[i].constructor.rule, ctx.customRules[i].config ? ctx.customRules[i].config.level : ctx.customRules[i]._config.level);
    const errorsOnEnterForType = ctx.customRules[i][definition.name] && ctx.customRules[i][definition.name]()[ruleName] ? await ctx.customRules[i][definition.name]()[ruleName](nodeContext.resolvedNode, definition, ctx, node, {
      traverseNode,
      visited,
      resolveType: _resolveType.default
    }) : [];
    const errorsOnEnterGeneric = ctx.customRules[i].any && ctx.customRules[i].any()[ruleName] ? await ctx.customRules[i].any()[ruleName](nodeContext.resolvedNode, definition, ctx, node, {
      traverseNode,
      visited,
      resolveType: _resolveType.default
    }) : [];

    if (Array.isArray(errorsOnEnterForType)) {
      ctx.result.push(...errorsOnEnterForType);
      errors.push(...errorsOnEnterForType);
    }

    if (Array.isArray(errorsOnEnterGeneric)) {
      ctx.result.push(...errorsOnEnterGeneric);
      errors.push(...errorsOnEnterGeneric);
    }
  }
}

var _default = traverseNode;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,