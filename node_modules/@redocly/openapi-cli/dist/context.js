"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _loader = _interopRequireWildcard(require("./loader"));

var _utils = _interopRequireDefault(require("./visitors/utils"));

var _resolveDefinition = require("./resolveDefinition");

var _error = require("./error");

var _resolver = require("./resolver");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-param-reassign */
const validateFieldsRaw = (node, ctx, config, ruleName, validators) => {
  const result = [];
  const vals = Object.keys(validators);

  for (let i = 0; i < vals.length; i += 1) {
    if ((0, _utils.default)(config, vals[i])) {
      if (validators[vals[i]]) {
        ctx.path.push(vals[i]);
        const validate = validators[vals[i]].bind({
          rule: ruleName,
          config
        });
        const res = validate(node, ctx, config);

        if (res) {
          if (Array.isArray(res)) result.push(...res);else result.push(res);
        }

        ctx.path.pop();
      }
    }
  }

  return result;
};

const getRule = (ctx, ruleName) => {
  const result = ctx.allRules.filter(r => r.constructor.rule === ruleName);
  return result ? result[0] : null;
};

function createContext(node, sourceFile, filePath, config) {
  const [enabledRules, allRules] = (0, _loader.default)(config);
  config.headers = config.headers || [];
  return {
    openapiVersion: node.swagger ? 2 : 3,
    document: node,
    filePath: _path.default.resolve(filePath),
    path: [],
    cache: {},
    visited: [],
    result: [],
    registryDependencies: [],
    definitionStack: [],
    definitions: (0, _resolveDefinition.loadDefinitions)(config),
    pathStack: [],
    source: sourceFile,
    enableCodeframe: !!(config && (config.codeframes === 'on' || config.codeframes === true)),
    customRules: [...(0, _loader.loadRulesetExtension)(config, 'transformingVisitors'), ...enabledRules, ...(0, _loader.loadRulesetExtension)(config, 'rulesExtensions')],
    allRules,
    config,
    headers: config.headers,
    messageHelpers: _error.messageHelpers,
    validateFieldsRaw,
    getRule,
    resolveNode: _resolver.resolveNodeNoSideEffects,
    fileDependencies: new Set(),
    resolveCache: {}
  };
}

var _default = createContext;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb250ZXh0LmpzIl0sIm5hbWVzIjpbInZhbGlkYXRlRmllbGRzUmF3Iiwibm9kZSIsImN0eCIsImNvbmZpZyIsInJ1bGVOYW1lIiwidmFsaWRhdG9ycyIsInJlc3VsdCIsInZhbHMiLCJPYmplY3QiLCJrZXlzIiwiaSIsImxlbmd0aCIsInBhdGgiLCJwdXNoIiwidmFsaWRhdGUiLCJiaW5kIiwicnVsZSIsInJlcyIsIkFycmF5IiwiaXNBcnJheSIsInBvcCIsImdldFJ1bGUiLCJhbGxSdWxlcyIsImZpbHRlciIsInIiLCJjb25zdHJ1Y3RvciIsImNyZWF0ZUNvbnRleHQiLCJzb3VyY2VGaWxlIiwiZmlsZVBhdGgiLCJlbmFibGVkUnVsZXMiLCJoZWFkZXJzIiwib3BlbmFwaVZlcnNpb24iLCJzd2FnZ2VyIiwiZG9jdW1lbnQiLCJyZXNvbHZlIiwiY2FjaGUiLCJ2aXNpdGVkIiwicmVnaXN0cnlEZXBlbmRlbmNpZXMiLCJkZWZpbml0aW9uU3RhY2siLCJkZWZpbml0aW9ucyIsInBhdGhTdGFjayIsInNvdXJjZSIsImVuYWJsZUNvZGVmcmFtZSIsImNvZGVmcmFtZXMiLCJjdXN0b21SdWxlcyIsIm1lc3NhZ2VIZWxwZXJzIiwicmVzb2x2ZU5vZGUiLCJyZXNvbHZlTm9kZU5vU2lkZUVmZmVjdHMiLCJmaWxlRGVwZW5kZW5jaWVzIiwiU2V0IiwicmVzb2x2ZUNhY2hlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBUEE7QUFTQSxNQUFNQSxpQkFBaUIsR0FBRyxDQUFDQyxJQUFELEVBQU9DLEdBQVAsRUFBWUMsTUFBWixFQUFvQkMsUUFBcEIsRUFBOEJDLFVBQTlCLEtBQTZDO0FBQ3JFLFFBQU1DLE1BQU0sR0FBRyxFQUFmO0FBRUEsUUFBTUMsSUFBSSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWUosVUFBWixDQUFiOztBQUNBLE9BQUssSUFBSUssQ0FBQyxHQUFHLENBQWIs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QUFBLFFBbEJLO0FBbUJMbkIsSUFBQUEsTUFuQks7QUFvQkwyQixJQUFBQSxPQUFPLEVBQUUzQixNQUFNLENBQUMyQixPQXBCWDtBQXFCTGUsSUFBQUEsY0FBYyxFQUFkQSxxQkFyQks7QUFzQkw3QyxJQUFBQSxpQkF0Qks7QUF1QkxxQixJQUFBQSxPQXZCSztBQXdCTHlCLElBQUFBLFdBQVcsRUFBRUMsa0NBeEJSO0FBMEJMQyxJQUFBQSxnQkFBZ0IsRUFBRSxJQUFJQyxHQUFKLEVBMUJiO0FBNEJMQyxJQUFBQSxZQUFZLEVBQUU7QUE1QlQsR0FBUDtBQThCRDs7ZUFFY3hCLGEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCBsb2FkUnVsZXNldCwgeyBsb2FkUnVsZXNldEV4dGVuc2lvbiB9IGZyb20gJy4vbG9hZGVyJztcbmltcG9ydCBpc1J1bGVFbmFibGVkIGZyb20gJy4vdmlzaXRvcnMvdXRpbHMnO1xuaW1wb3J0IHsgbG9hZERlZmluaXRpb25zIH0gZnJvbSAnLi9yZXNvbHZlRGVmaW5pdGlvbic7XG5pbXBvcnQgeyBtZXNzYWdlSGVscGVycyB9IGZyb20gJy4vZXJyb3InO1xuaW1wb3J0IHsgcmVzb2x2ZU5vZGVOb1NpZGVFZmZlY3RzIH0gZnJvbSAnLi9yZXNvbHZlcic7XG5cbmNvbnN0IHZhbGlkYXRlRmllbGRzUmF3ID0gKG5vZGUsIGN0eCwgY29uZmlnLCBydWxlTmFtZSwgdmFsaWRhdG9ycykgPT4ge1xuICBjb25zdCByZXN1bHQgPSBbXTtcblxuICBjb25zdCB2YWxzID0gT2JqZWN0LmtleXModmFsaWRhdG9ycyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdmFscy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChpc1J1bGVFbmFibGVkKGNvbmZpZywgdmFsc1tpXSkpIHtcbiAgICAgIGlmICh2YWxpZGF0b3JzW3ZhbHNbaV1dKSB7XG4gICAgICAgIGN0eC5wYXRoLnB1c2godmFsc1tpXSk7XG4gICAgICAgIGNvbnN0IHZhbGlkYXRlID0gdmFsaWRhdG9yc1t2YWxzW2ldXS5iaW5kKHsgcnVsZTogcnVsZU5hbWUsIGNvbmZpZyB9KTtcbiAgICAgICAgY29uc3QgcmVzID0gdmFsaWRhdGUobm9kZSwgY3R4LCBjb25maWcpO1xuICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzKSkgcmVzdWx0LnB1c2goLi4ucmVzKTtcbiAgICAgICAgICBlbHNlIHJlc3VsdC5wdXNoKHJlcyk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnBhdGgucG9wKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5jb25zdCBnZXRSdWxlID0gKGN0eCwgcnVsZU5hbWUpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gY3R4LmFsbFJ1bGVzLmZpbHRlcigocikgPT4gci5jb25zdHJ1Y3Rvci5ydWxlID09PSBydWxlTmFtZSk7XG4gIHJldHVybiByZXN1bHQgPyByZXN1bHRbMF0gOiBudWxsO1xufTtcblxuZnVuY3Rpb24gY3JlYXRlQ29udGV4dChub2RlLCBzb3VyY2VGaWxlLCBmaWxlUGF0aCwgY29uZmlnKSB7XG4gIGNvbnN0IFtlbmFibGVkUnVsZXMsIGFsbFJ1bGVzXSA9IGxvYWRSdWxlc2V0KGNvbmZpZyk7XG5cbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCBbXTtcbiAgcmV0dXJuIHtcbiAgICBvcGVuYXBpVmVyc2lvbjogbm9kZS5zd2FnZ2VyID8gMiA6IDMsXG4gICAgZG9jdW1lbnQ6IG5vZGUsXG4gICAgZmlsZVBhdGg6IHBhdGgucmVzb2x2ZShmaWxlUGF0aCksXG4gICAgcGF0aDogW10sXG4gICAgY2FjaGU6IHt9LFxuICAgIHZpc2l0ZWQ6IFtdLFxuICAgIHJlc3VsdDogW10sXG4gICAgcmVnaXN0cnlEZXBlbmRlbmNpZXM6IFtdLFxuICAgIGRlZmluaXRpb25TdGFjazogW10sXG4gICAgZGVmaW5pdGlvbnM6IGxvYWREZWZpbml0aW9ucyhjb25maWcpLFxuICAgIHBhdGhTdGFjazogW10sXG4gICAgc291cmNlOiBzb3VyY2VGaWxlLFxuICAgIGVuYWJsZUNvZGVmcmFtZTogISEoY29uZmlnICYmIChjb25maWcuY29kZWZyYW1lcyA9PT0gJ29uJyB8fCBjb25maWcuY29kZWZyYW1lcyA9PT0gdHJ1ZSkpLFxuICAgIGN1c3RvbVJ1bGVzOiBbXG4gICAgICAuLi5sb2FkUnVsZXNldEV4dGVuc2lvbihjb25maWcsICd0cmFuc2Zvcm1pbmdWaXNpdG9ycycpLFxuICAgICAgLi4uZW5hYmxlZFJ1bGVzLCAuLi5sb2FkUnVsZXNldEV4dGVuc2lvbihjb25maWcsICdydWxlc0V4dGVuc2lvbnMnKSxcbiAgICBdLFxuICAgIGFsbFJ1bGVzLFxuICAgIGNvbmZpZyxcbiAgICBoZWFkZXJzOiBjb25maWcuaGVhZGVycyxcbiAgICBtZXNzYWdlSGVscGVycyxcbiAgICB2YWxpZGF0ZUZpZWxkc1JhdyxcbiAgICBnZXRSdWxlLFxuICAgIHJlc29sdmVOb2RlOiByZXNvbHZlTm9kZU5vU2lkZUVmZmVjdHMsXG5cbiAgICBmaWxlRGVwZW5kZW5jaWVzOiBuZXcgU2V0KCksXG5cbiAgICByZXNvbHZlQ2FjaGU6IHt9LFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb250ZXh0O1xuIl19