"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.respondWithGzip = respondWithGzip;
exports.startHttpServer = startHttpServer;
exports.startWsServer = startWsServer;
exports.mimeTypes = void 0;

var http = _interopRequireWildcard(require("http"));

var zlib = _interopRequireWildcard(require("zlib"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const SocketServer = require('simple-websocket/server');

const mimeTypes = {
  '.html': 'text/html',
  '.js': 'text/javascript',
  '.css': 'text/css',
  '.json': 'application/json',
  '.png': 'image/png',
  '.jpg': 'image/jpg',
  '.gif': 'image/gif',
  '.svg': 'image/svg+xml',
  '.wav': 'audio/wav',
  '.mp4': 'video/mp4',
  '.woff': 'application/font-woff',
  '.ttf': 'application/font-ttf',
  '.eot': 'application/vnd.ms-fontobject',
  '.otf': 'application/font-otf',
  '.wasm': 'application/wasm'
}; // credits: https://stackoverflow.com/a/9238214/1749888

exports.mimeTypes = mimeTypes;

function respondWithGzip(contents, request, response, headers = {}, code = 200) {
  let compressedStream;
  const acceptEncoding = request.headers['accept-encoding'] || '';

  if (acceptEncoding.match(/\bdeflate\b/)) {
    response.writeHead(code, { ...headers,
      'content-encoding': 'deflate'
    });
    compressedStream = zlib.createDeflate();
  } else if (acceptEncoding.match(/\bgzip\b/)) {
    response.writeHead(code, { ...headers,
      'content-encoding': 'gzip'
    });
    compressedStream = zlib.createGzip();
  } else {
    response.writeHead(code, headers);

    if (typeof contents === 'string' || Buffer.isBuffer(contents)) {
      response.write(contents);
      response.end();
    } else {
      contents.pipe(response);
    }

    return;
  }

  if (typeof contents === 'string' || Buffer.isBuffer(contents)) {
    compressedStream.write(contents);
    compressedStream.pipe(response);
    compressedStream.end();
  } else {
    contents.pipe(compressedStream).pipe(response);
  }
}

function startHttpServer(port, handler) {
  return http.createServer(handler).listen(port);
}

function startWsServer(port) {
  const socketServer = new SocketServer({
    port,
    clientTracking: true
  });
  socketServer.on('connection', socket => {
    socket.on('data', data => {
      const message = JSON.parse(data);

      switch (message.type) {
        case 'ping':
          socket.send('{"type": "pong"}');
          break;

        default: // nope

      }
    });
  });

  socketServer.broadcast = message => {
    // eslint-disable-next-line no-underscore-dangle
    socketServer._server.clients.forEach(client => {
      if (client.readyState === 1) {
        // OPEN
        client.send(message);
      }
    });
  };

  return socketServer;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmV2aWV3LWRvY3Mvc2VydmVyLmpzIl0sIm5hbWVzIjpbIlNvY2tldFNlcnZlciIsInJlcXVpcmUiLCJtaW1lVHlwZXMiLCJyZXNwb25kV2l0aEd6aXAiLCJjb250ZW50cyIsInJlcXVlc3QiLCJyZXNwb25zZSIsImhlYWRlcnMiLCJjb2RlIiwiY29tcHJlc3NlZFN0cmVhbSIsImFjY2VwdEVuY29kaW5nIiwibWF0Y2giLCJ3cml0ZUhlYWQiLCJ6bGliIiwiY3JlYXRlRGVmbGF0ZSIsImNyZWF0ZUd6aXAiLCJCdWZmZXIiLCJpc0J1ZmZlciIsIndyaXRlIiwiZW5kIiwicGlwZSIsInN0YXJ0SHR0cFNlcnZlciIsInBvcnQiLCJoYW5kbGVyIiwiaHR0cCIsImNyZWF0ZVNlcnZlciIsImxpc3RlbiIsInN0YXJ0V3NTZXJ2ZXIiLCJzb2NrZXRTZXJ2ZXIiLCJjbGllbnRUcmFja2luZyIsIm9uIiwic29ja2V0IiwiZGF0YSIsIm1lc3NhZ2UiLCJKU09OIiwicGFyc2UiLCJ0eXBlIiwic2VuZCIsImJyb2FkY2FzdCIsIl9zZXJ2ZXIiLCJjbGllbnRzIiwiZm9yRWFjaCIsImNsaWVudCIsInJlYWR5U3RhdGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7Ozs7O0FBRUEsTUFBTUEsWUFBWSxHQUFHQyxPQUFPLENBQUMseUJBQUQsQ0FBNUI7O0FBRU8sTUFBTUMsU0FBUyxHQUFHO0FBQ3ZCLFdBQVMsV0FEYztBQUV2QixTQUFPLGlCQUZnQjtBQUd2QixVQUFRLFVBSGU7QUFJdkIsV0FBUyxrQkFKYztBQUt2QixVQUFRLFdBTGU7QUFNdkIsVUFBUSxXQU5lO0FBT3ZCLFVBQVEsV0FQZTtBQVF2QixVQUFRLGVBUmU7QUFTdkIsVUFBUSxXQVRlO0FBVXZCLFVBQVEsV0FWZTtBQVd2QixXQUFTLHVCQVhjO0FBWXZCLFVBQVEsc0JBWmU7QUFhdkIsVUFBUSwrQkFiZTtBQWN2QixVQUFRLHNCQWRlO0FBZXZCLFdBQVM7QUFmYyxDQUFs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LE9BQWIsQ0FBcUJDLE9BQXJCLENBQTZCQyxPQUE3QixDQUFzQ0MsTUFBRCxJQUFZO0FBQy9DLFVBQUlBLE1BQU0sQ0FBQ0MsVUFBUCxLQUFzQixDQUExQixFQUE2QjtBQUFFO0FBQzdCRCxRQUFBQSxNQUFNLENBQUNMLElBQVAsQ0FBWUosT0FBWjtBQUNEO0FBQ0YsS0FKRDtBQUtELEdBUEQ7O0FBU0EsU0FBT0wsWUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgaHR0cCBmcm9tICdodHRwJztcbmltcG9ydCAqIGFzIHpsaWIgZnJvbSAnemxpYic7XG5cbmNvbnN0IFNvY2tldFNlcnZlciA9IHJlcXVpcmUoJ3NpbXBsZS13ZWJzb2NrZXQvc2VydmVyJyk7XG5cbmV4cG9ydCBjb25zdCBtaW1lVHlwZXMgPSB7XG4gICcuaHRtbCc6ICd0ZXh0L2h0bWwnLFxuICAnLmpzJzogJ3RleHQvamF2YXNjcmlwdCcsXG4gICcuY3NzJzogJ3RleHQvY3NzJyxcbiAgJy5qc29uJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAnLnBuZyc6ICdpbWFnZS9wbmcnLFxuICAnLmpwZyc6ICdpbWFnZS9qcGcnLFxuICAnLmdpZic6ICdpbWFnZS9naWYnLFxuICAnLnN2Zyc6ICdpbWFnZS9zdmcreG1sJyxcbiAgJy53YXYnOiAnYXVkaW8vd2F2JyxcbiAgJy5tcDQnOiAndmlkZW8vbXA0JyxcbiAgJy53b2ZmJzogJ2FwcGxpY2F0aW9uL2ZvbnQtd29mZicsXG4gICcudHRmJzogJ2FwcGxpY2F0aW9uL2ZvbnQtdHRmJyxcbiAgJy5lb3QnOiAnYXBwbGljYXRpb24vdm5kLm1zLWZvbnRvYmplY3QnLFxuICAnLm90Zic6ICdhcHBsaWNhdGlvbi9mb250LW90ZicsXG4gICcud2FzbSc6ICdhcHBsaWNhdGlvbi93YXNtJyxcbn07XG5cbi8vIGNyZWRpdHM6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS85MjM4MjE0LzE3NDk4ODhcbmV4cG9ydCBmdW5jdGlvbiByZXNwb25kV2l0aEd6aXAoY29udGVudHMsIHJlcXVlc3QsIHJlc3BvbnNlLCBoZWFkZXJzID0ge30sIGNvZGUgPSAyMDApIHtcbiAgbGV0IGNvbXByZXNzZWRTdHJlYW07XG4gIGNvbnN0IGFjY2VwdEVuY29kaW5nID0gcmVxdWVzdC5oZWFkZXJzWydhY2NlcHQtZW5jb2RpbmcnXSB8fCAnJztcbiAgaWYgKGFjY2VwdEVuY29kaW5nLm1hdGNoKC9cXGJkZWZsYXRlXFxiLykpIHtcbiAgICByZXNwb25zZS53cml0ZUhlYWQoY29kZSwgeyAuLi5oZWFkZXJzLCAnY29udGVudC1lbmNvZGluZyc6ICdkZWZsYXRlJyB9KTtcbiAgICBjb21wcmVzc2VkU3RyZWFtID0gemxpYi5jcmVhdGVEZWZsYXRlKCk7XG4gIH0gZWxzZSBpZiAoYWNjZXB0RW5jb2RpbmcubWF0Y2goL1xcYmd6aXBcXGIvKSkge1xuICAgIHJlc3BvbnNlLndyaXRlSGVhZChjb2RlLCB7IC4uLmhlYWRlcnMsICdjb250ZW50LWVuY29kaW5nJzogJ2d6aXAnIH0pO1xuICAgIGNvbXByZXNzZWRTdHJlYW0gPSB6bGliLmNyZWF0ZUd6aXAoKTtcbiAgfSBlbHNlIHtcbiAgICByZXNwb25zZS53cml0ZUhlYWQoY29kZSwgaGVhZGVycyk7XG4gICAgaWYgKHR5cGVvZiBjb250ZW50cyA9PT0gJ3N0cmluZycgfHwgQnVmZmVyLmlzQnVmZmVyKGNvbnRlbnRzKSkge1xuICAgICAgcmVzcG9uc2Uud3JpdGUoY29udGVudHMpO1xuICAgICAgcmVzcG9uc2UuZW5kKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRlbnRzLnBpcGUocmVzcG9uc2UpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIGNvbnRlbnRzID09PSAnc3RyaW5nJyB8fCBCdWZmZXIuaXNCdWZmZXIoY29udGVudHMpKSB7XG4gICAgY29tcHJlc3NlZFN0cmVhbS53cml0ZShjb250ZW50cyk7XG4gICAgY29tcHJlc3NlZFN0cmVhbS5waXBlKHJlc3BvbnNlKTtcbiAgICBjb21wcmVzc2VkU3RyZWFtLmVuZCgpO1xuICB9IGVsc2Uge1xuICAgIGNvbnRlbnRzLnBpcGUoY29tcHJlc3NlZFN0cmVhbSkucGlwZShyZXNwb25zZSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0SHR0cFNlcnZlcihwb3J0LCBoYW5kbGVyKSB7XG4gIHJldHVybiBodHRwLmNyZWF0ZVNlcnZlcihoYW5kbGVyKS5saXN0ZW4ocG9ydCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydFdzU2VydmVyKHBvcnQpIHtcbiAgY29uc3Qgc29ja2V0U2VydmVyID0gbmV3IFNvY2tldFNlcnZlcih7IHBvcnQsIGNsaWVudFRyYWNraW5nOiB0cnVlIH0pO1xuXG4gIHNvY2tldFNlcnZlci5vbignY29ubmVjdGlvbicsIChzb2NrZXQpID0+IHtcbiAgICBzb2NrZXQub24oJ2RhdGEnLCAoZGF0YSkgPT4ge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICBzd2l0Y2ggKG1lc3NhZ2UudHlwZSkge1xuICAgICAgICBjYXNlICdwaW5nJzpcbiAgICAgICAgICBzb2NrZXQuc2VuZCgne1widHlwZVwiOiBcInBvbmdcIn0nKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAvLyBub3BlXG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIHNvY2tldFNlcnZlci5icm9hZGNhc3QgPSAobWVzc2FnZSkgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZVxuICAgIHNvY2tldFNlcnZlci5fc2VydmVyLmNsaWVudHMuZm9yRWFjaCgoY2xpZW50KSA9PiB7XG4gICAgICBpZiAoY2xpZW50LnJlYWR5U3RhdGUgPT09IDEpIHsgLy8gT1BFTlxuICAgICAgICBjbGllbnQuc2VuZChtZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gc29ja2V0U2VydmVyO1xufVxuIl19