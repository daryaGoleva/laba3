"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = require("fs");

var _path = require("path");

var _os = require("os");

var _chalk = _interopRequireDefault(require("chalk"));

var _query = _interopRequireDefault(require("./query"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable max-len */
const TOKEN_FILENAME = '.redocly-config.json';

class RedoclyClient {
  constructor() {
    this.loadToken();
  }

  hasToken() {
    return !!this.accessToken;
  }

  loadToken() {
    if (process.env.REDOCLY_AUTHORIZATION) {
      this.accessToken = process.env.REDOCLY_AUTHORIZATION;
      return;
    }

    const credentialsPath = (0, _path.resolve)((0, _os.homedir)(), TOKEN_FILENAME);

    if ((0, _fs.existsSync)(credentialsPath)) {
      const credentials = JSON.parse((0, _fs.readFileSync)(credentialsPath, 'utf-8'));
      this.accessToken = credentials && credentials.token;
    }
  }

  async isAuthorizedWithRedocly() {
    return this.hasToken() && !!(await this.getAuthorizationHeader());
  }

  async verifyToken(accessToken) {
    if (!accessToken) return false;
    const authDetails = await RedoclyClient.authorize(accessToken);
    if (!authDetails) return false;
    return true;
  }

  async getAuthorizationHeader() {
    // print this only if there is token but invalid
    if (this.accessToken && !(await this.verifyToken(this.accessToken))) {
      process.stdout.write(`${_chalk.default.yellow('Warning:')} invalid Redoc.ly access token. Use "npx @redocly/openapi-cli registry:login" to provide your access token\n`);
      return null;
    }

    return this.accessToken;
  }

  async login(accessToken) {
    const credentialsPath = (0, _path.resolve)((0, _os.homedir)(), TOKEN_FILENAME);
    process.stdout.write(_chalk.default.grey('\n  Logging in...\n'));
    const authorized = await this.verifyToken(accessToken);

    if (!authorized) {
      process.stdout.write(_chalk.default.red('Authorization failed. Please check if you entered a valid token.\n'));
      process.exit(1);
    }

    this.accessToken = accessToken;
    const credentials = {
      token: accessToken
    };
    (0, _fs.writeFileSync)(credentialsPath, JSON.stringify(credentials, null, 2));
    process.stdout.write(_chalk.default.green('  Authorization confirmed. ‚úÖ\n\n'));
  }

  logout() {
    const credentialsPath = (0, _path.resolve)((0, _os.homedir)(), TOKEN_FILENAME);

    if ((0, _fs.existsSync)(credentialsPath)) {
      (0, _fs.unlinkSync)(credentialsPath);
    }

    process.stdout.write('Logged out from the Redoc.ly account. ‚úã\n');
  }

  async query(queryString, parameters = {}, headers = {}) {
    return (0, _query.default)(queryString, parameters, {
      Authorization: this.accessToken,
      ...headers
    });
  }

  static async authorize(accessToken, verbose = false) {
    try {
      const result = await (0, _query.default)(`
      {
        definitions {
          id
        }
      }
      `, {}, {
        Authorization: accessToken
      });
      return result;
    } catch (e) {
      if (verbose) process.stderr.write(e);
      return null;
    }
  }

  async updateDependencies(dependencies) {
    const r = await this.query(`
    mutation UpdateBranchDependenciesFromURLs(
      $urls: [String!]!
      $definitionId: Int!
      $versionId: Int!
      $branchId: Int!
    ) {
      updateBranchDependenciesFromURLs(
        definitionId: $definitionId
        versionId: $versionId
        branchId: $branchId
        urls: $urls
      ) {
        branchName
      }
    }
    `, {
      urls: dependencies || [],
      definitionId: parseInt(process.env.DEFINITION, 10),
      versionId: parseInt(process.env.VERSION, 10),
      branchId: parseInt(process.env.BRANCH, 10)
    });
    return r;
  }

  static isRegistryURL(link) {
    const domain = process.env.REDOCLY_DOMAIN || 'redoc.ly';
    if (!link.startsWith(`https://api.${domain}/registry/`)) return false;
    const registryPath = link.replace(`https://api.${domain}/registry/`, '');
    const pathParts = registryPath.split('/'); // we can be sure, that there is job UUID present
    // (org, definition, version, bundle, branch, job, "openapi.yaml" ü§¶‚Äç‚ôÇÔ∏è)
    // so skip this link.

    if (pathParts.length === 7) return false;
    return true;
  }

}

exports.default = RedoclyClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,