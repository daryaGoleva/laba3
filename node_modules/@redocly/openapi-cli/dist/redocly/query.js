"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = query;
exports.RequestError = void 0;

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const GRAPHQL_ENDPOINT = process.env.REDOCLY_DOMAIN ? `https://api.${process.env.REDOCLY_DOMAIN}/graphql` : 'https://api.redoc.ly/graphql';

async function query(queryString, variables = {}, headers = {}, debugInfo = '') {
  // eslint-disable-next-line no-param-reassign
  headers = { ...headers,
    'Content-Type': 'application/json'
  };
  const gQLResponse = await (0, _nodeFetch.default)(GRAPHQL_ENDPOINT, {
    method: 'POST',
    headers,
    body: JSON.stringify({
      query: queryString,
      variables
    })
  });

  if (!gQLResponse.ok) {
    throw new RequestError(`Failed to execute query: ${gQLResponse.status}`, 500, debugInfo);
  }

  const response = await gQLResponse.json();

  if (response.errors && response.errors.length) {
    throw new RequestError(`Query failed: ${response.errors[0].message}`, 500, debugInfo);
  }

  return response.data;
}

class RequestError extends Error {
  constructor(message, statusCode = 500, debugInfo = '') {
    super(message);
    this.statusCode = statusCode;
    this.debugInfo = debugInfo;
  }

}

exports.RequestError = RequestError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWRvY2x5L3F1ZXJ5LmpzIl0sIm5hbWVzIjpbIkdSQVBIUUxfRU5EUE9JTlQiLCJwcm9jZXNzIiwiZW52IiwiUkVET0NMWV9ET01BSU4iLCJxdWVyeSIsInF1ZXJ5U3RyaW5nIiwidmFyaWFibGVzIiwiaGVhZGVycyIsImRlYnVnSW5mbyIsImdRTFJlc3BvbnNlIiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJvayIsIlJlcXVlc3RFcnJvciIsInN0YXR1cyIsInJlc3BvbnNlIiwianNvbiIsImVycm9ycyIsImxlbmd0aCIsIm1lc3NhZ2UiLCJkYXRhIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsInN0YXR1c0NvZGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFFQSxNQUFNQSxnQkFBZ0IsR0FBR0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLGNBQVosR0FDcEIsZUFBY0YsT0FBTyxDQUFDQyxHQUFSLENBQVlDLGNBQWUsVUFEckIsR0FDaUMsOEJBRDFEOztBQUdlLGVBQWVDLEtBQWYsQ0FBcUJDLFdBQXJCLEVBQWtDQyxTQUFTLEdBQUcsRUFBOUMsRUFBa0RDLE9BQU8sR0FBRyxFQUE1RCxFQUFnRUMsU0FBUyxHQUFHLEVBQTVFLEVBQWdGO0FBQzdGO0FBQ0FELEVBQUFBLE9BQU8sR0FBRyxFQUNSLEdBQUdBLE9BREs7QUFFUixvQkFBZ0I7QUFGUixHQUFWO0FBS0EsUUFBTUUsV0FBVyxHQUFHLE1BQU0sd0JBQU1ULGdCQUFOLEVBQXdCO0FBQ2hEVSxJQUFBQSxNQUFNLEVBQUUsTUFEd0M7QUFFaERILElBQUFBLE9BRmdEO0FBR2hESSxJQUFBQSxJQUFJLEVBQUVDLElBQUksQ0FBQ0MsU0FBTCxDQUFlO0FBQ25CVCxNQUFBQSxLQUFLLEVBQUVDLFdBRFk7QUFFbkJDLE1BQUFBO0FBRm1CLEtBQWY7QUFIMEMsR0FBeEIsQ0FBMUI7O0FBVUEsTUFBSSxDQUFDRyxXQUFXLENBQUNLLEVBQWpCLEVBQXFCO0FBQ25CLFVBQU0sSUFBSUMsWUFBSixDQUFrQiw0QkFBMkJOLFdBQVcsQ0FBQ08sTUFBTyxFQUFoRSxFQUFtRSxHQUFuRSxFQUF3RVIsU0FBeEUsQ0FBTjtBQUNEOztBQUVELFFBQU1TLFFBQVEsR0FBRyxNQUFNUixXQUFXLENBQUNTLElBQVosRUFBdkI7O0FBQ0EsTUFBSUQsUUFBUSxDQUFDRSxNQUFULElBQW1CRixRQUFRLENBQUNFLE1BQVQsQ0FBZ0JDLE1BQXZDLEVBQStDO0FBQzdDLFVBQU0sSUFBSUwsWUFBSixDQUFrQixpQkFBZ0JFLFFBQVEsQ0FBQ0UsTUFBVCxDQUFnQixDQUFoQixFQUFtQkUsT0FBUSxFQUE3RCxFQUFnRSxHQUFoRSxFQUFxRWIsU0FBckUsQ0FBTjtBQUNEOztBQUVELFNBQU9TLFFBQVEsQ0FBQ0ssSUFBaEI7QUFDRDs7QUFFTSxNQUFNUCxZQUFOLFNBQTJCUSxLQUEzQixDQUFpQztBQUN0Q0MsRUFBQUEsV0FBVyxDQUFDSCxPQUFELEVBQVVJLFVBQVUsR0FBRyxHQUF2QixFQUE0QmpCLFNBQVMsR0FBRyxFQUF4QyxFQUE0QztBQUNyRCxVQUFNYSxPQUFOO0FBQ0EsU0FBS0ksVUFBTCxHQUFrQkEsVUFBbEI7QUFDQSxTQUFLakIsU0FBTCxHQUFpQkEsU0FBakI7QUFDRDs7QUFMcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZmV0Y2ggZnJvbSAnbm9kZS1mZXRjaCc7XG5cbmNvbnN0IEdSQVBIUUxfRU5EUE9JTlQgPSBwcm9jZXNzLmVudi5SRURPQ0xZX0RPTUFJTlxuICA/IGBodHRwczovL2FwaS4ke3Byb2Nlc3MuZW52LlJFRE9DTFlfRE9NQUlOfS9ncmFwaHFsYCA6ICdodHRwczovL2FwaS5yZWRvYy5seS9ncmFwaHFsJztcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gcXVlcnkocXVlcnlTdHJpbmcsIHZhcmlhYmxlcyA9IHt9LCBoZWFkZXJzID0ge30sIGRlYnVnSW5mbyA9ICcnKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBoZWFkZXJzID0ge1xuICAgIC4uLmhlYWRlcnMsXG4gICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgfTtcblxuICBjb25zdCBnUUxSZXNwb25zZSA9IGF3YWl0IGZldGNoKEdSQVBIUUxfRU5EUE9JTlQsIHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBoZWFkZXJzLFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIHF1ZXJ5OiBxdWVyeVN0cmluZyxcbiAgICAgIHZhcmlhYmxlcyxcbiAgICB9KSxcbiAgfSk7XG5cblxuICBpZiAoIWdRTFJlc3BvbnNlLm9rKSB7XG4gICAgdGhyb3cgbmV3IFJlcXVlc3RFcnJvcihgRmFpbGVkIHRvIGV4ZWN1dGUgcXVlcnk6ICR7Z1FMUmVzcG9uc2Uuc3RhdHVzfWAsIDUwMCwgZGVidWdJbmZvKTtcbiAgfVxuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ1FMUmVzcG9uc2UuanNvbigpO1xuICBpZiAocmVzcG9uc2UuZXJyb3JzICYmIHJlc3BvbnNlLmVycm9ycy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmVxdWVzdEVycm9yKGBRdWVyeSBmYWlsZWQ6ICR7cmVzcG9uc2UuZXJyb3JzWzBdLm1lc3NhZ2V9YCwgNTAwLCBkZWJ1Z0luZm8pO1xuICB9XG5cbiAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG59XG5cbmV4cG9ydCBjbGFzcyBSZXF1ZXN0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHN0YXR1c0NvZGUgPSA1MDAsIGRlYnVnSW5mbyA9ICcnKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5zdGF0dXNDb2RlID0gc3RhdHVzQ29kZTtcbiAgICB0aGlzLmRlYnVnSW5mbyA9IGRlYnVnSW5mbztcbiAgfVxufVxuIl19