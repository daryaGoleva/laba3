"use strict";

class validateOAS2Operation {
  static get rule() {
    return 'oas2-schema/operation';
  }

  get validators() {
    return {
      tags(node, ctx) {
        if (!node || !node.tags) return null;
        const errors = [];

        if (node && node.tags && !Array.isArray(node.tags)) {
          return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('array'), 'value');
        }

        for (let i = 0; i < node.tags.length; i++) {
          if (typeof node.tags[i] !== 'string') {
            ctx.path.push(i);
            errors.push(ctx.createError('Items of the tags array must be strings in the OAS2 Operation object.', 'value'));
            ctx.path.pop();
          }
        }

        return errors;
      },

      summary(node, ctx) {
        if (node && node.summary && typeof node.summary !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      description(node, ctx) {
        if (node && node.description && typeof node.description !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      operationId(node, ctx) {
        if (node && node.operationId && typeof node.operationId !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      responses: (node, ctx) => !node.responses ? ctx.createError(ctx.messageHelpers.missingRequiredField('responses'), 'key') : null,

      deprecated(node, ctx) {
        if (node && node.deprecated && typeof node.deprecated !== 'boolean') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      }

    };
  }

  OAS2Operation() {
    return {
      onEnter: (node, definition, ctx) => ctx.validateFields(this.config, this.rule, this.validators)
    };
  }

}

module.exports = validateOAS2Operation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9vYXMyLXN0cnVjdHVyYWwvdmFsaWRhdGVPQVMyT3BlcmF0aW9uLmpzIl0sIm5hbWVzIjpbInZhbGlkYXRlT0FTMk9wZXJhdGlvbiIsInJ1bGUiLCJ2YWxpZGF0b3JzIiwidGFncyIsIm5vZGUiLCJjdHgiLCJlcnJvcnMiLCJBcnJheSIsImlzQXJyYXkiLCJjcmVhdGVFcnJvciIsIm1lc3NhZ2VIZWxwZXJzIiwiZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyIiwiaSIsImxlbmd0aCIsInBhdGgiLCJwdXNoIiwicG9wIiwic3VtbWFyeSIsImRlc2NyaXB0aW9uIiwib3BlcmF0aW9uSWQiLCJyZXNwb25zZXMiLCJtaXNzaW5nUmVxdWlyZWRGaWVsZCIsImRlcHJlY2F0ZWQiLCJPQVMyT3BlcmF0aW9uIiwib25FbnRlciIsImRlZmluaXRpb24iLCJ2YWxpZGF0ZUZpZWxkcyIsImNvbmZpZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTUEscUJBQU4sQ0FBNEI7QUFDMUIsYUFBV0MsSUFBWCxHQUFrQjtBQUNoQixXQUFPLHVCQUFQO0FBQ0Q7O0FBRUQsTUFBSUMsVUFBSixHQUFpQjtBQUNmLFdBQU87QUFDTEMsTUFBQUEsSUFBSSxDQUFDQyxJQUFELEVBQU9DLEdBQVAsRUFBWTtBQUNkLFlBQUksQ0FBQ0QsSUFBRCxJQUFTLENBQUNBLElBQUksQ0FBQ0QsSUFBbkIsRUFBeUIsT0FBTyxJQUFQO0FBRXpCLGNBQU1HLE1BQU0sR0FBRyxFQUFmOztBQUVBLFlBQUlGLElBQUksSUFBSUEsSUFBSSxDQUFDRCxJQUFiLElBQXFCLENBQUNJLEtBQUssQ0FBQ0MsT0FBTixDQUFjSixJQUFJLENBQUNELElBQW5CLENBQTFCLEVBQW9EO0FBQ2xELGlCQUFPRSxHQUFHLENBQUNJLFdBQUosQ0FBZ0JKLEdBQUcsQ0FBQ0ssY0FBSixDQUFtQkMsOEJBQW5CLENBQWtELE9BQWxELENBQWhCLEVBQTRFLE9BQTVFLENBQVA7QUFDRDs7QUFFRCxhQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdSLElBQUksQ0FBQ0QsSUFBTCxDQUFVVSxNQUE5QixFQUFzQ0QsQ0FBQyxFQUF2QyxFQUEyQztBQUN6QyxjQUFJLE9BQU9SLElBQUksQ0FBQ0QsSUFBTCxDQUFVUyxDQUFWLENBQVAsS0FBd0IsUUFBNUIsRUFBc0M7QUFDcENQLFlBQUFBLEdBQUcsQ0FBQ1MsSUFBSixDQUFTQyxJQUFULENBQWNILENBQWQ7QUFDQU4sWUFBQUEsTUFBTSxDQUFDUyxJQUFQLENBQVlWLEdBQUcsQ0FBQ0ksV0FBSixDQUFnQix1RUFBaEIsRUFBeUYsT0FBekYsQ0FBWjtBQUNBSixZQUFBQSxHQUFHLENBQUNTLElBQUosQ0FBU0UsR0FBVDtBQUNEO0FBQ0Y7O0FBRUQsZUFBT1YsTUFBUDtBQUNELE9BbkJJOztBQW9CTFcsTUFBQUEsT0FBTyxDQUFDYixJQUFELEVBQU9DLEdBQVAsRUFBWTtBQUNqQixZQUFJRCxJQUFJLElBQUlBLElBQUksQ0FBQ2EsT0FBYixJQUF3QixPQUFPYixJQUFJLENBQUNhLE9BQVosS0FBd0IsUUFBcEQsRUFBOEQsT0FBT1osR0FBRyxDQUFDSSxXQUFKLENBQWdCSixHQUFHLENBQUNLLGNBQUosQ0FBbUJDLDhCQUFuQixDQUFrRCxRQUFsRCxDQUFoQixFQUE2RSxPQUE3RSxDQUFQO0FBQzlELGVBQU8sSUFBUDtBQUNELE9BdkJJOztBQXdCTE8sTUFBQUEsV0FBVyxDQUFDZCxJQUFELEVBQU9DLEdBQVAsRUFBWTtBQUNyQixZQUFJRCxJQUFJLElBQUlBLElBQUksQ0FBQ2MsV0FBYixJQUE0QixPQUFPZCxJQUFJLENBQUNjLFdBQVosS0FBNEIsUUFBNUQsRUFBc0UsT0FBT2IsR0FBRyxDQUFDSSxXQUFKLENBQWdCSixHQUFHLENBQUNLLGNBQUosQ0FBbUJDLDhCQUFuQixDQUFrRCxRQUFsRCxDQUFoQixFQUE2RSxPQUE3RSxDQUFQO0FBQ3RFLGVBQU8sSUFBUDtBQUNELE9BM0JJOztBQTRCTFEsTUFBQUEsV0FBVyxDQUFDZixJQUFELEVBQU9DLEdBQVAsRUFBWTtBQUNyQixZQUFJRCxJQUFJLElBQUlBLElBQUksQ0FBQ2UsV0FBYixJQUE0QixPQUFPZixJQUFJLENBQUNlLFdBQVosS0FBNEIsUUFBNUQsRUFBc0UsT0FBT2QsR0FBRyxDQUFDSSxXQUFKLENBQWdCSixHQUFHLENBQUNLLGNBQUosQ0FBbUJDLDhCQUFuQixDQUFrRCxRQUFsRCxDQUFoQixFQUE2RSxPQUE3RSxDQUFQO0FBQ3RFLGVBQU8sSUFBUDtBQUNELE9BL0JJOztBQWdDTFMsTUFBQUEsU0FBUyxFQUFFLENBQUNoQixJQUFELEVBQU9DLEdBQVAsS0FBZ0IsQ0FBQ0QsSUFBSSxDQUFDZ0IsU0FBTixHQUFrQmYsR0FBRyxDQUFDSSxXQUFKLENBQWdCSixHQUFHLENBQUNLLGNBQUosQ0FBbUJXLG9CQUFuQixDQUF3QyxXQUF4QyxDQUFoQixFQUFzRSxLQUF0RSxDQUFsQixHQUFpRyxJQWhDdkg7O0FBaUNMQyxNQUFBQSxVQUFVLENBQUNsQixJQUFELEVBQU9DLEdBQVAsRUFBWTtBQUNwQixZQUFJRCxJQUFJLElBQUlBLElBQUksQ0FBQ2tCLFVBQWIsSUFBMkIsT0FBT2xCLElBQUksQ0FBQ2tCLFVBQVosS0FBMkIsU0FBMUQsRUFBcUUsT0FBT2pCLEdBQUcsQ0FBQ0ksV0FBSixDQUFnQkosR0FBRyxDQUFDSyxjQUFKLENBQW1CQyw4QkFBbkIsQ0FBa0QsUUFBbEQsQ0FBaEIsRUFBNkUsT0FBN0UsQ0FBUDtBQUNyRSxlQUFPLElBQVA7QUFDRDs7QUFwQ0ksS0FBUDtBQXNDRDs7QUFFRFksRUFBQUEsYUFBYSxHQUFHO0FBQ2QsV0FBTztBQUNMQyxNQUFBQSxPQUFPLEVBQUUsQ0FBQ3BCLElBQUQsRUFBT3FCLFVBQVAsRUFBbUJwQixHQUFuQixLQUEyQkEsR0FBRyxDQUFDcUIsY0FBSixDQUNsQyxLQUFLQyxNQUQ2QixFQUNyQixLQUFLMUIsSUFEZ0IsRUFDVixLQUFLQyxVQURLO0FBRC9CLEtBQVA7QUFLRDs7QUFwRHlCOztBQXVENUIwQixNQUFNLENBQUNDLE9BQVAsR0FBaUI3QixxQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyB2YWxpZGF0ZU9BUzJPcGVyYXRpb24ge1xuICBzdGF0aWMgZ2V0IHJ1bGUoKSB7XG4gICAgcmV0dXJuICdvYXMyLXNjaGVtYS9vcGVyYXRpb24nO1xuICB9XG5cbiAgZ2V0IHZhbGlkYXRvcnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRhZ3Mobm9kZSwgY3R4KSB7XG4gICAgICAgIGlmICghbm9kZSB8fCAhbm9kZS50YWdzKSByZXR1cm4gbnVsbDtcblxuICAgICAgICBjb25zdCBlcnJvcnMgPSBbXTtcblxuICAgICAgICBpZiAobm9kZSAmJiBub2RlLnRhZ3MgJiYgIUFycmF5LmlzQXJyYXkobm9kZS50YWdzKSkge1xuICAgICAgICAgIHJldHVybiBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLmZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlcignYXJyYXknKSwgJ3ZhbHVlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUudGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICh0eXBlb2Ygbm9kZS50YWdzW2ldICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY3R4LnBhdGgucHVzaChpKTtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKGN0eC5jcmVhdGVFcnJvcignSXRlbXMgb2YgdGhlIHRhZ3MgYXJyYXkgbXVzdCBiZSBzdHJpbmdzIGluIHRoZSBPQVMyIE9wZXJhdGlvbiBvYmplY3QuJywgJ3ZhbHVlJykpO1xuICAgICAgICAgICAgY3R4LnBhdGgucG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVycm9ycztcbiAgICAgIH0sXG4gICAgICBzdW1tYXJ5KG5vZGUsIGN0eCkge1xuICAgICAgICBpZiAobm9kZSAmJiBub2RlLnN1bW1hcnkgJiYgdHlwZW9mIG5vZGUuc3VtbWFyeSAhPT0gJ3N0cmluZycpIHJldHVybiBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLmZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlcignc3RyaW5nJyksICd2YWx1ZScpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sXG4gICAgICBkZXNjcmlwdGlvbihub2RlLCBjdHgpIHtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5kZXNjcmlwdGlvbiAmJiB0eXBlb2Ygbm9kZS5kZXNjcmlwdGlvbiAhPT0gJ3N0cmluZycpIHJldHVybiBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLmZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlcignc3RyaW5nJyksICd2YWx1ZScpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sXG4gICAgICBvcGVyYXRpb25JZChub2RlLCBjdHgpIHtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5vcGVyYXRpb25JZCAmJiB0eXBlb2Ygbm9kZS5vcGVyYXRpb25JZCAhPT0gJ3N0cmluZycpIHJldHVybiBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLmZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlcignc3RyaW5nJyksICd2YWx1ZScpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sXG4gICAgICByZXNwb25zZXM6IChub2RlLCBjdHgpID0+ICghbm9kZS5yZXNwb25zZXMgPyBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLm1pc3NpbmdSZXF1aXJlZEZpZWxkKCdyZXNwb25zZXMnKSwgJ2tleScpIDogbnVsbCksXG4gICAgICBkZXByZWNhdGVkKG5vZGUsIGN0eCkge1xuICAgICAgICBpZiAobm9kZSAmJiBub2RlLmRlcHJlY2F0ZWQgJiYgdHlwZW9mIG5vZGUuZGVwcmVjYXRlZCAhPT0gJ2Jvb2xlYW4nKSByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5maWVsZFR5cGVNaXNtYXRjaE1lc3NhZ2VIZWxwZXIoJ3N0cmluZycpLCAndmFsdWUnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBPQVMyT3BlcmF0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbkVudGVyOiAobm9kZSwgZGVmaW5pdGlvbiwgY3R4KSA9PiBjdHgudmFsaWRhdGVGaWVsZHMoXG4gICAgICAgIHRoaXMuY29uZmlnLCB0aGlzLnJ1bGUsIHRoaXMudmFsaWRhdG9ycyxcbiAgICAgICksXG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZhbGlkYXRlT0FTMk9wZXJhdGlvbjtcbiJdfQ==