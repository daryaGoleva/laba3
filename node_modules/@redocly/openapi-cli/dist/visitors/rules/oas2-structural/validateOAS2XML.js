"use strict";

var _utils = require("../../../utils");

class ValidateOAS2XML {
  static get rule() {
    return 'oas2-schema/xml';
  }

  get validators() {
    return {
      name(node, ctx) {
        if (node && node.name && typeof node.name !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      namespace(node, ctx) {
        if (node && node.namespace && typeof node.namespace !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        if (node && node.namespace && !(0, _utils.isUrl)(node.namespace)) return ctx.createError('The value of a"namespace" field should be a valid URL.', 'value');
        return null;
      },

      prefix(node, ctx) {
        if (node && node.prefix && typeof node.prefix !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      attribute(node, ctx) {
        if (node && node.attribute && typeof node.attribute !== 'boolean') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('boolean'), 'value');
        return null;
      },

      wrapped(node, ctx) {
        if (node && node.wrapped && typeof node.wrapped !== 'boolean') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('boolean'), 'value');
        return null;
      }

    };
  }

  OAS2XML() {
    return {
      onEnter: (node, definition, ctx) => ctx.validateFields(this.config, this.rule, this.validators)
    };
  }

}

module.exports = ValidateOAS2XML;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9vYXMyLXN0cnVjdHVyYWwvdmFsaWRhdGVPQVMyWE1MLmpzIl0sIm5hbWVzIjpbIlZhbGlkYXRlT0FTMlhNTCIsInJ1bGUiLCJ2YWxpZGF0b3JzIiwibmFtZSIsIm5vZGUiLCJjdHgiLCJjcmVhdGVFcnJvciIsIm1lc3NhZ2VIZWxwZXJzIiwiZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyIiwibmFtZXNwYWNlIiwicHJlZml4IiwiYXR0cmlidXRlIiwid3JhcHBlZCIsIk9BUzJYTUwiLCJvbkVudGVyIiwiZGVmaW5pdGlvbiIsInZhbGlkYXRlRmllbGRzIiwiY29uZmlnIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQSxNQUFNQSxlQUFOLENBQXNCO0FBQ3BCLGFBQVdDLElBQVgsR0FBa0I7QUFDaEIsV0FBTyxpQkFBUDtBQUNEOztBQUVELE1BQUlDLFVBQUosR0FBaUI7QUFDZixXQUFPO0FBQ0xDLE1BQUFBLElBQUksQ0FBQ0MsSUFBRCxFQUFPQyxHQUFQLEVBQVk7QUFDZCxZQUFJRCxJQUFJLElBQUlBLElBQUksQ0FBQ0QsSUFBYixJQUFxQixPQUFPQyxJQUFJLENBQUNELElBQVosS0FBcUIsUUFBOUMsRUFBd0QsT0FBT0UsR0FBRyxDQUFDQyxXQUFKLENBQWdCRCxHQUFHLENBQUNFLGNBQUosQ0FBbUJDLDhCQUFuQixDQUFrRCxRQUFsRCxDQUFoQixFQUE2RSxPQUE3RSxDQUFQO0FBQ3hELGVBQU8sSUFBUDtBQUNELE9BSkk7O0FBS0xDLE1BQUFBLFNBQVMsQ0FBQ0wsSUFBRCxFQUFPQyxHQUFQLEVBQVk7QUFDbkIsWUFBSUQsSUFBSSxJQUFJQSxJQUFJLENBQUNLLFNBQWIsSUFBMEIsT0FBT0wsSUFBSSxDQUFDSyxTQUFaLEtBQTBCLFFBQXhELEVBQWtFLE9BQU9KLEdBQUcsQ0FBQ0MsV0FBSixDQUFnQkQsR0FBRyxDQUFDRSxjQUFKLENBQW1CQyw4QkFBbkIsQ0FBa0QsUUFBbEQsQ0FBaEIsRUFBNkUsT0FBN0UsQ0FBUDtBQUNsRSxZQUFJSixJQUFJLElBQUlBLElBQUksQ0FBQ0ssU0FBYixJQUEwQixDQUFDLGtCQUFNTCxJQUFJLENBQUNLLFNBQVgsQ0FBL0IsRUFBc0QsT0FBT0osR0FBRyxDQUFDQyxXQUFKLENBQWdCLHdEQUFoQixFQUEwRSxPQUExRSxDQUFQO0FBQ3RELGVBQU8sSUFBUDtBQUNELE9BVEk7O0FBVUxJLE1BQUFBLE1BQU0sQ0FBQ04sSUFBRCxFQUFPQyxHQUFQLEVBQVk7QUFDaEIsWUFBSUQsSUFBSSxJQUFJQSxJQUFJLENBQUNNLE1BQWIsSUFBdUIsT0FBT04sSUFBSSxDQUFDTSxNQUFaLEtBQXVCLFFBQWxELEVBQTRELE9BQU9MLEdBQUcsQ0FBQ0MsV0FBSixDQUFnQkQsR0FBRyxDQUFDRSxjQUFKLENBQW1CQyw4QkFBbkIsQ0FBa0QsUUFBbEQsQ0FBaEIsRUFBNkUsT0FBN0UsQ0FBUDtBQUM1RCxlQUFPLElBQVA7QUFDRCxPQWJJOztBQWNMRyxNQUFBQSxTQUFTLENBQUNQLElBQUQsRUFBT0MsR0FBUCxFQUFZO0FBQ25CLFlBQUlELElBQUksSUFBSUEsSUFBSSxDQUFDTyxTQUFiLElBQTBCLE9BQU9QLElBQUksQ0FBQ08sU0FBWixLQUEwQixTQUF4RCxFQUFtRSxPQUFPTixHQUFHLENBQUNDLFdBQUosQ0FBZ0JELEdBQUcsQ0FBQ0UsY0FBSixDQUFtQkMsOEJBQW5CLENBQWtELFNBQWxELENBQWhCLEVBQThFLE9BQTlFLENBQVA7QUFDbkUsZUFBTyxJQUFQO0FBQ0QsT0FqQkk7O0FBa0JMSSxNQUFBQSxPQUFPLENBQUNSLElBQUQsRUFBT0MsR0FBUCxFQUFZO0FBQ2pCLFlBQUlELElBQUksSUFBSUEsSUFBSSxDQUFDUSxPQUFiLElBQXdCLE9BQU9SLElBQUksQ0FBQ1EsT0FBWixLQUF3QixTQUFwRCxFQUErRCxPQUFPUCxHQUFHLENBQUNDLFdBQUosQ0FBZ0JELEdBQUcsQ0FBQ0UsY0FBSixDQUFtQkMsOEJBQW5CLENBQWtELFNBQWxELENBQWhCLEVBQThFLE9BQTlFLENBQVA7QUFDL0QsZUFBTyxJQUFQO0FBQ0Q7O0FBckJJLEtBQVA7QUF1QkQ7O0FBRURLLEVBQUFBLE9BQU8sR0FBRztBQUNSLFdBQU87QUFDTEMsTUFBQUEsT0FBTyxFQUFFLENBQUNWLElBQUQsRUFBT1csVUFBUCxFQUFtQlYsR0FBbkIsS0FBMkJBLEdBQUcsQ0FBQ1csY0FBSixDQUNsQyxLQUFLQyxNQUQ2QixFQUNyQixLQUFLaEIsSUFEZ0IsRUFDVixLQUFLQyxVQURLO0FBRC9CLEtBQVA7QUFLRDs7QUFyQ21COztBQXlDdEJnQixNQUFNLENBQUNDLE9BQVAsR0FBaUJuQixlQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzVXJsIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMnO1xuXG5jbGFzcyBWYWxpZGF0ZU9BUzJYTUwge1xuICBzdGF0aWMgZ2V0IHJ1bGUoKSB7XG4gICAgcmV0dXJuICdvYXMyLXNjaGVtYS94bWwnO1xuICB9XG5cbiAgZ2V0IHZhbGlkYXRvcnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWUobm9kZSwgY3R4KSB7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUubmFtZSAmJiB0eXBlb2Ygbm9kZS5uYW1lICE9PSAnc3RyaW5nJykgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMuZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyKCdzdHJpbmcnKSwgJ3ZhbHVlJyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcbiAgICAgIG5hbWVzcGFjZShub2RlLCBjdHgpIHtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5uYW1lc3BhY2UgJiYgdHlwZW9mIG5vZGUubmFtZXNwYWNlICE9PSAnc3RyaW5nJykgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMuZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyKCdzdHJpbmcnKSwgJ3ZhbHVlJyk7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUubmFtZXNwYWNlICYmICFpc1VybChub2RlLm5hbWVzcGFjZSkpIHJldHVybiBjdHguY3JlYXRlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBhXCJuYW1lc3BhY2VcIiBmaWVsZCBzaG91bGQgYmUgYSB2YWxpZCBVUkwuJywgJ3ZhbHVlJyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcbiAgICAgIHByZWZpeChub2RlLCBjdHgpIHtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5wcmVmaXggJiYgdHlwZW9mIG5vZGUucHJlZml4ICE9PSAnc3RyaW5nJykgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMuZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyKCdzdHJpbmcnKSwgJ3ZhbHVlJyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcbiAgICAgIGF0dHJpYnV0ZShub2RlLCBjdHgpIHtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5hdHRyaWJ1dGUgJiYgdHlwZW9mIG5vZGUuYXR0cmlidXRlICE9PSAnYm9vbGVhbicpIHJldHVybiBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLmZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlcignYm9vbGVhbicpLCAndmFsdWUnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgICAgd3JhcHBlZChub2RlLCBjdHgpIHtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS53cmFwcGVkICYmIHR5cGVvZiBub2RlLndyYXBwZWQgIT09ICdib29sZWFuJykgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMuZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyKCdib29sZWFuJyksICd2YWx1ZScpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIE9BUzJYTUwoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uRW50ZXI6IChub2RlLCBkZWZpbml0aW9uLCBjdHgpID0+IGN0eC52YWxpZGF0ZUZpZWxkcyhcbiAgICAgICAgdGhpcy5jb25maWcsIHRoaXMucnVsZSwgdGhpcy52YWxpZGF0b3JzLFxuICAgICAgKSxcbiAgICB9O1xuICB9XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBWYWxpZGF0ZU9BUzJYTUw7XG4iXX0=