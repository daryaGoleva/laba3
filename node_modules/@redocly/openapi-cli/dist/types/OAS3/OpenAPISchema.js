"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _OpenAPIExternalDocumentation = _interopRequireDefault(require("./OpenAPIExternalDocumentation"));

var _OpenAPISchemaMap = _interopRequireDefault(require("./OpenAPISchemaMap"));

var _OpenAPIDiscriminator = _interopRequireDefault(require("./OpenAPIDiscriminator"));

var _OpenAPIXML = _interopRequireDefault(require("./OpenAPIXML"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @ts-check

/* eslint-disable import/no-cycle */
const OpenAPISchemaObject = {
  name: 'OpenAPISchema',
  isIdempotent: true,
  properties: {
    allOf() {
      return OpenAPISchemaObject;
    },

    anyOf() {
      return OpenAPISchemaObject;
    },

    oneOf() {
      return OpenAPISchemaObject;
    },

    not() {
      return OpenAPISchemaObject;
    },

    items() {
      return OpenAPISchemaObject;
    },

    additionalProperties(value) {
      switch (typeof value) {
        case 'boolean':
          return null;

        default:
          return OpenAPISchemaObject;
      }
    },

    properties: _OpenAPISchemaMap.default,
    discriminator: _OpenAPIDiscriminator.default,
    externalDocs: _OpenAPIExternalDocumentation.default,
    xml: _OpenAPIXML.default,
    title: null,
    description: null,
    multipleOf: null,
    maximum: null,
    exclusiveMaximum: null,
    minimum: null,
    exclusiveMinimum: null,
    maxLength: null,
    minLength: null,
    pattern: null,
    maxItems: null,
    minItems: null,
    uniqueItems: null,
    maxProperties: null,
    minProperties: null,
    required: null,
    enum: null,
    type: null,
    format: null,
    nullable: null,
    readOnly: null,
    writeOnly: null,
    deprecated: null,
    example: null,
    default: null
  },
  resolvableScalars: ['description']
};
var _default = OpenAPISchemaObject;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90eXBlcy9PQVMzL09wZW5BUElTY2hlbWEuanMiXSwibmFtZXMiOlsiT3BlbkFQSVNjaGVtYU9iamVjdCIsIm5hbWUiLCJpc0lkZW1wb3RlbnQiLCJwcm9wZXJ0aWVzIiwiYWxsT2YiLCJhbnlPZiIsIm9uZU9mIiwibm90IiwiaXRlbXMiLCJhZGRpdGlvbmFsUHJvcGVydGllcyIsInZhbHVlIiwiT3BlbkFQSVNjaGVtYU1hcCIsImRpc2NyaW1pbmF0b3IiLCJPcGVuQVBJRGlzY3JpbWluYXRvciIsImV4dGVybmFsRG9jcyIsIk9wZW5BUElFeHRlcm5hbERvY3VtZW50YXRpb24iLCJ4bWwiLCJPcGVuQVBJWE1MIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsIm11bHRpcGxlT2YiLCJtYXhpbXVtIiwiZXhjbHVzaXZlTWF4aW11bSIsIm1pbmltdW0iLCJleGNsdXNpdmVNaW5pbXVtIiwibWF4TGVuZ3RoIiwibWluTGVuZ3RoIiwicGF0dGVybiIsIm1heEl0ZW1zIiwibWluSXRlbXMiLCJ1bmlxdWVJdGVtcyIsIm1heFByb3BlcnRpZXMiLCJtaW5Qcm9wZXJ0aWVzIiwicmVxdWlyZWQiLCJlbnVtIiwidHlwZSIsImZvcm1hdCIsIm51bGxhYmxlIiwicmVhZE9ubHkiLCJ3cml0ZU9ubHkiLCJkZXByZWNhdGVkIiwiZXhhbXBsZSIsImRlZmF1bHQiLCJyZXNvbHZhYmxlU2NhbGFycyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUdBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBTkE7O0FBQ0E7QUFPQSxNQUFNQSxtQkFBbUIsR0FBRztBQUMxQkMsRUFBQUEsSUFBSSxFQUFFLGVBRG9CO0FBRTFCQyxFQUFBQSxZQUFZLEVBQUUsSUFGWTtBQUcxQkMsRUFBQUEsVUFBVSxFQUFFO0FBQ1ZDLElBQUFBLEtBQUssR0FBRztBQUNOLGFBQU9KLG1CQUFQO0FBQ0QsS0FIUzs7QUFJVkssSUFBQUEsS0FBSyxHQUFHO0FBQ04sYUFBT0wsbUJBQVA7QUFDRCxLQU5TOztBQU9WTSxJQUFBQSxLQUFLLEdBQUc7QUFDTixhQUFPTixtQkFBUDtBQUNELEtBVFM7O0FBVVZPLElBQUFBLEdBQUcsR0FBRztBQUNKLGFBQU9QLG1CQUFQO0FBQ0QsS0FaUzs7QUFhVlEsSUFBQUEsS0FBSyxHQUFHO0FBQ04sYUFBT1IsbUJBQVA7QUFDRCxLQWZTOztBQWdCVlMsSUFBQUEsb0JBQW9CLENBQUNDLEtBQUQsRUFBUTtBQUMxQixjQUFRLE9BQU9BLEtBQWY7QUFDRSxhQUFLLFNBQUw7QUFDRSxpQkFBTyxJQUFQOztBQUNGO0FBQ0UsaUJBQU9WLG1CQUFQO0FBSko7QUFNRCxLQXZCUzs7QUF3QlZHLElBQUFBLFVBQVUsRUFBRVEseUJBeEJGO0FBeUJWQyxJQUFBQSxhQUFhLEVBQUVDLDZCQXpCTDtBQTBCVkMsSUFBQUEsWUFBWSxFQUFFQyxxQ0ExQko7QUEyQlZDLElBQUFBLEdBQUcsRUFBRUMsbUJBM0JLO0FBNkJWQyxJQUFBQSxLQUFLLEVBQUUsSUE3Qkc7QUE4QlZDLElBQUFBLFdBQVcsRUFBRSxJQTlCSDtBQStCVkMsSUFBQUEsVUFBVSxFQUFFLElBL0JGO0FBZ0NWQyxJQUFBQSxPQUFPLEVBQUUsSUFoQ0M7QUFpQ1ZDLElBQUFBLGdCQUFnQixFQUFFLElBakNSO0FBa0NWQyxJQUFBQSxPQUFPLEVBQUUsSUFsQ0M7QUFtQ1ZDLElBQUFBLGdCQUFnQixFQUFFLElBbkNSO0FBb0NWQyxJQUFBQSxTQUFTLEVBQUUsSUFwQ0Q7QUFxQ1ZDLElBQUFBLFNBQVMsRUFBRSxJQXJDRDtBQXNDVkMsSUFBQUEsT0FBTyxFQUFFLElBdENDO0FBdUNWQyxJQUFBQSxRQUFRLEVBQUUsSUF2Q0E7QUF3Q1ZDLElBQUFBLFFBQVEsRUFBRSxJQXhDQTtBQXlDVkMsSUFBQUEsV0FBVyxFQUFFLElBekNIO0FBMENWQyxJQUFBQSxhQUFhLEVBQUUsSUExQ0w7QUEyQ1ZDLElBQUFBLGFBQWEsRUFBRSxJQTNDTDtBQTRDVkMsSUFBQUEsUUFBUSxFQUFFLElBNUNBO0FBNkNWQyxJQUFBQSxJQUFJLEVBQUUsSUE3Q0k7QUE4Q1ZDLElBQUFBLElBQUksRUFBRSxJQTlDSTtBQStDVkMsSUFBQUEsTUFBTSxFQUFFLElBL0NFO0FBZ0RWQyxJQUFBQSxRQUFRLEVBQUUsSUFoREE7QUFpRFZDLElBQUFBLFFBQVEsRUFBRSxJQWpEQTtBQWtEVkMsSUFBQUEsU0FBUyxFQUFFLElBbEREO0FBbURWQyxJQUFBQSxVQUFVLEVBQUUsSUFuREY7QUFvRFZDLElBQUFBLE9BQU8sRUFBRSxJQXBEQztBQXFEVkMsSUFBQUEsT0FBTyxFQUFFO0FBckRDLEdBSGM7QUEwRDFCQyxFQUFBQSxpQkFBaUIsRUFBRSxDQUNqQixhQURpQjtBQTFETyxDQUE1QjtlQStEZTNDLG1CIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQHRzLWNoZWNrXG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tY3ljbGUgKi9cblxuaW1wb3J0IE9wZW5BUElFeHRlcm5hbERvY3VtZW50YXRpb24gZnJvbSAnLi9PcGVuQVBJRXh0ZXJuYWxEb2N1bWVudGF0aW9uJztcbmltcG9ydCBPcGVuQVBJU2NoZW1hTWFwIGZyb20gJy4vT3BlbkFQSVNjaGVtYU1hcCc7XG5pbXBvcnQgT3BlbkFQSURpc2NyaW1pbmF0b3IgZnJvbSAnLi9PcGVuQVBJRGlzY3JpbWluYXRvcic7XG5pbXBvcnQgT3BlbkFQSVhNTCBmcm9tICcuL09wZW5BUElYTUwnO1xuXG5jb25zdCBPcGVuQVBJU2NoZW1hT2JqZWN0ID0ge1xuICBuYW1lOiAnT3BlbkFQSVNjaGVtYScsXG4gIGlzSWRlbXBvdGVudDogdHJ1ZSxcbiAgcHJvcGVydGllczoge1xuICAgIGFsbE9mKCkge1xuICAgICAgcmV0dXJuIE9wZW5BUElTY2hlbWFPYmplY3Q7XG4gICAgfSxcbiAgICBhbnlPZigpIHtcbiAgICAgIHJldHVybiBPcGVuQVBJU2NoZW1hT2JqZWN0O1xuICAgIH0sXG4gICAgb25lT2YoKSB7XG4gICAgICByZXR1cm4gT3BlbkFQSVNjaGVtYU9iamVjdDtcbiAgICB9LFxuICAgIG5vdCgpIHtcbiAgICAgIHJldHVybiBPcGVuQVBJU2NoZW1hT2JqZWN0O1xuICAgIH0sXG4gICAgaXRlbXMoKSB7XG4gICAgICByZXR1cm4gT3BlbkFQSVNjaGVtYU9iamVjdDtcbiAgICB9LFxuICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzKHZhbHVlKSB7XG4gICAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gT3BlbkFQSVNjaGVtYU9iamVjdDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHByb3BlcnRpZXM6IE9wZW5BUElTY2hlbWFNYXAsXG4gICAgZGlzY3JpbWluYXRvcjogT3BlbkFQSURpc2NyaW1pbmF0b3IsXG4gICAgZXh0ZXJuYWxEb2NzOiBPcGVuQVBJRXh0ZXJuYWxEb2N1bWVudGF0aW9uLFxuICAgIHhtbDogT3BlbkFQSVhNTCxcblxuICAgIHRpdGxlOiBudWxsLFxuICAgIGRlc2NyaXB0aW9uOiBudWxsLFxuICAgIG11bHRpcGxlT2Y6IG51bGwsXG4gICAgbWF4aW11bTogbnVsbCxcbiAgICBleGNsdXNpdmVNYXhpbXVtOiBudWxsLFxuICAgIG1pbmltdW06IG51bGwsXG4gICAgZXhjbHVzaXZlTWluaW11bTogbnVsbCxcbiAgICBtYXhMZW5ndGg6IG51bGwsXG4gICAgbWluTGVuZ3RoOiBudWxsLFxuICAgIHBhdHRlcm46IG51bGwsXG4gICAgbWF4SXRlbXM6IG51bGwsXG4gICAgbWluSXRlbXM6IG51bGwsXG4gICAgdW5pcXVlSXRlbXM6IG51bGwsXG4gICAgbWF4UHJvcGVydGllczogbnVsbCxcbiAgICBtaW5Qcm9wZXJ0aWVzOiBudWxsLFxuICAgIHJlcXVpcmVkOiBudWxsLFxuICAgIGVudW06IG51bGwsXG4gICAgdHlwZTogbnVsbCxcbiAgICBmb3JtYXQ6IG51bGwsXG4gICAgbnVsbGFibGU6IG51bGwsXG4gICAgcmVhZE9ubHk6IG51bGwsXG4gICAgd3JpdGVPbmx5OiBudWxsLFxuICAgIGRlcHJlY2F0ZWQ6IG51bGwsXG4gICAgZXhhbXBsZTogbnVsbCxcbiAgICBkZWZhdWx0OiBudWxsLFxuICB9LFxuICByZXNvbHZhYmxlU2NhbGFyczogW1xuICAgICdkZXNjcmlwdGlvbicsXG4gIF0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBPcGVuQVBJU2NoZW1hT2JqZWN0O1xuIl19