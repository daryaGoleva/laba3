"use strict";

const RedoclyClient = require('../../../redocly').default;

const {
  isFullyQualifiedUrl
} = require('../../../utils');

class RegsitryDependencies {
  static get rule() {
    return 'registry-dependencies';
  }

  OpenAPIRoot() {
    return {
      onEnter: async (_node, _definition, ctx) => {
        this.redoclyClient = new RedoclyClient();

        if (this.redoclyClient.hasToken()) {
          ctx.headers = [...ctx.headers, {
            matches: `https://api.${process.env.REDOCLY_DOMAIN || 'redoc.ly'}/registry/**`,
            name: 'Authorization',
            value: this.redoclyClient && (await this.redoclyClient.getAuthorizationHeader()) || ''
          }];
        }
      },
      onExit: async (_node, _definition, ctx) => {
        if (process.env.UPDATE_REGISTRY && this.redoclyClient.hasToken()) {
          await this.redoclyClient.updateDependencies(ctx.registryDependencies);
        }
      }
    };
  }

  any() {
    return {
      onEnter: (_node, _definition, ctx, unresolvedNode) => {
        if (unresolvedNode.$ref) {
          const link = unresolvedNode.$ref.split('#/')[0];

          if (isFullyQualifiedUrl(link) && RedoclyClient.isRegistryURL(link)) {
            ctx.registryDependencies.push(link);
          }
        }
      }
    };
  }

}

module.exports = RegsitryDependencies;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9yZWdpc3RyeS9yZWdpc3RyeURlcGVuZGVuY2llcy5qcyJdLCJuYW1lcyI6WyJSZWRvY2x5Q2xpZW50IiwicmVxdWlyZSIsImRlZmF1bHQiLCJpc0Z1bGx5UXVhbGlmaWVkVXJsIiwiUmVnc2l0cnlEZXBlbmRlbmNpZXMiLCJydWxlIiwiT3BlbkFQSVJvb3QiLCJvbkVudGVyIiwiX25vZGUiLCJfZGVmaW5pdGlvbiIsImN0eCIsInJlZG9jbHlDbGllbnQiLCJoYXNUb2tlbiIsImhlYWRlcnMiLCJtYXRjaGVzIiwicHJvY2VzcyIsImVudiIsIlJFRE9DTFlfRE9NQUlOIiwibmFtZSIsInZhbHVlIiwiZ2V0QXV0aG9yaXphdGlvbkhlYWRlciIsIm9uRXhpdCIsIlVQREFURV9SRUdJU1RSWSIsInVwZGF0ZURlcGVuZGVuY2llcyIsInJlZ2lzdHJ5RGVwZW5kZW5jaWVzIiwiYW55IiwidW5yZXNvbHZlZE5vZGUiLCIkcmVmIiwibGluayIsInNwbGl0IiwiaXNSZWdpc3RyeVVSTCIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLGFBQWEsR0FBR0MsT0FBTyxDQUFDLGtCQUFELENBQVAsQ0FBNEJDLE9BQWxEOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUEwQkYsT0FBTyxDQUFDLGdCQUFELENBQXZDOztBQUVBLE1BQU1HLG9CQUFOLENBQTJCO0FBQ3pCLGFBQVdDLElBQVgsR0FBa0I7QUFDaEIsV0FBTyx1QkFBUDtBQUNEOztBQUVEQyxFQUFBQSxXQUFXLEdBQUc7QUFDWixXQUFPO0FBQ0xDLE1BQUFBLE9BQU8sRUFBRSxPQUFPQyxLQUFQLEVBQWNDLFdBQWQsRUFBMkJDLEdBQTNCLEtBQW1DO0FBQzFDLGFBQUtDLGFBQUwsR0FBcUIsSUFBSVgsYUFBSixFQUFyQjs7QUFDQSxZQUFJLEtBQUtXLGFBQUwsQ0FBbUJDLFFBQW5CLEVBQUosRUFBbUM7QUFDakNGLFVBQUFBLEdBQUcsQ0FBQ0csT0FBSixHQUFjLENBQUMsR0FBR0gsR0FBRyxDQUFDRyxPQUFSLEVBQWlCO0FBQzdCQyxZQUFBQSxPQUFPLEVBQUcsZUFBY0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLGNBQVosSUFBOEIsVUFBVyxjQURwQztBQUU3QkMsWUFBQUEsSUFBSSxFQUFFLGVBRnVCO0FBRzdCQyxZQUFBQSxLQUFLLEVBQUcsS0FBS1IsYUFBTCxLQUFzQixNQUFNLEtBQUtBLGFBQUwsQ0FBbUJTLHNCQUFuQixFQUE1QixDQUFELElBQTZFO0FBSHZELFdBQWpCLENBQWQ7QUFLRDtBQUNGLE9BVkk7QUFXTEMsTUFBQUEsTUFBTSxFQUFFLE9BQU9iLEtBQVAsRUFBY0MsV0FBZCxFQUEyQkMsR0FBM0IsS0FBbUM7QUFDekMsWUFBSUssT0FBTyxDQUFDQyxHQUFSLENBQVlNLGVBQVosSUFBK0IsS0FBS1gsYUFBTCxDQUFtQkMsUUFBbkIsRUFBbkMsRUFBa0U7QUFDaEUsZ0JBQU0sS0FBS0QsYUFBTCxDQUFtQlksa0JBQW5CLENBQXNDYixHQUFHLENBQUNjLG9CQUExQyxDQUFOO0FBQ0Q7QUFDRjtBQWZJLEtBQVA7QUFpQkQ7O0FBRURDLEVBQUFBLEdBQUcsR0FBRztBQUNKLFdBQU87QUFDTGxCLE1BQUFBLE9BQU8sRUFBRSxDQUFDQyxLQUFELEVBQVFDLFdBQVIsRUFBcUJDLEdBQXJCLEVBQTBCZ0IsY0FBMUIsS0FBNkM7QUFDcEQsWUFBSUEsY0FBYyxDQUFDQyxJQUFuQixFQUF5QjtBQUN2QixnQkFBTUMsSUFBSSxHQUFHRixjQUFjLENBQUNDLElBQWYsQ0FBb0JFLEtBQXBCLENBQTBCLElBQTFCLEVBQWdDLENBQWhDLENBQWI7O0FBQ0EsY0FBSTFCLG1CQUFtQixDQUFDeUIsSUFBRCxDQUFuQixJQUE2QjVCLGFBQWEsQ0FBQzhCLGFBQWQsQ0FBNEJGLElBQTVCLENBQWpDLEVBQW9FO0FBQ2xFbEIsWUFBQUEsR0FBRyxDQUFDYyxvQkFBSixDQUF5Qk8sSUFBekIsQ0FBOEJILElBQTlCO0FBQ0Q7QUFDRjtBQUNGO0FBUkksS0FBUDtBQVVEOztBQXBDd0I7O0FBdUMzQkksTUFBTSxDQUFDQyxPQUFQLEdBQWlCN0Isb0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVkb2NseUNsaWVudCA9IHJlcXVpcmUoJy4uLy4uLy4uL3JlZG9jbHknKS5kZWZhdWx0O1xuY29uc3QgeyBpc0Z1bGx5UXVhbGlmaWVkVXJsIH0gPSByZXF1aXJlKCcuLi8uLi8uLi91dGlscycpO1xuXG5jbGFzcyBSZWdzaXRyeURlcGVuZGVuY2llcyB7XG4gIHN0YXRpYyBnZXQgcnVsZSgpIHtcbiAgICByZXR1cm4gJ3JlZ2lzdHJ5LWRlcGVuZGVuY2llcyc7XG4gIH1cblxuICBPcGVuQVBJUm9vdCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb25FbnRlcjogYXN5bmMgKF9ub2RlLCBfZGVmaW5pdGlvbiwgY3R4KSA9PiB7XG4gICAgICAgIHRoaXMucmVkb2NseUNsaWVudCA9IG5ldyBSZWRvY2x5Q2xpZW50KCk7XG4gICAgICAgIGlmICh0aGlzLnJlZG9jbHlDbGllbnQuaGFzVG9rZW4oKSkge1xuICAgICAgICAgIGN0eC5oZWFkZXJzID0gWy4uLmN0eC5oZWFkZXJzLCB7XG4gICAgICAgICAgICBtYXRjaGVzOiBgaHR0cHM6Ly9hcGkuJHtwcm9jZXNzLmVudi5SRURPQ0xZX0RPTUFJTiB8fCAncmVkb2MubHknfS9yZWdpc3RyeS8qKmAsXG4gICAgICAgICAgICBuYW1lOiAnQXV0aG9yaXphdGlvbicsXG4gICAgICAgICAgICB2YWx1ZTogKHRoaXMucmVkb2NseUNsaWVudCAmJiBhd2FpdCB0aGlzLnJlZG9jbHlDbGllbnQuZ2V0QXV0aG9yaXphdGlvbkhlYWRlcigpKSB8fCAnJyxcbiAgICAgICAgICB9XTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uRXhpdDogYXN5bmMgKF9ub2RlLCBfZGVmaW5pdGlvbiwgY3R4KSA9PiB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5VUERBVEVfUkVHSVNUUlkgJiYgdGhpcy5yZWRvY2x5Q2xpZW50Lmhhc1Rva2VuKCkpIHtcbiAgICAgICAgICBhd2FpdCB0aGlzLnJlZG9jbHlDbGllbnQudXBkYXRlRGVwZW5kZW5jaWVzKGN0eC5yZWdpc3RyeURlcGVuZGVuY2llcyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIGFueSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb25FbnRlcjogKF9ub2RlLCBfZGVmaW5pdGlvbiwgY3R4LCB1bnJlc29sdmVkTm9kZSkgPT4ge1xuICAgICAgICBpZiAodW5yZXNvbHZlZE5vZGUuJHJlZikge1xuICAgICAgICAgIGNvbnN0IGxpbmsgPSB1bnJlc29sdmVkTm9kZS4kcmVmLnNwbGl0KCcjLycpWzBdO1xuICAgICAgICAgIGlmIChpc0Z1bGx5UXVhbGlmaWVkVXJsKGxpbmspICYmIFJlZG9jbHlDbGllbnQuaXNSZWdpc3RyeVVSTChsaW5rKSkge1xuICAgICAgICAgICAgY3R4LnJlZ2lzdHJ5RGVwZW5kZW5jaWVzLnB1c2gobGluayk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWdzaXRyeURlcGVuZGVuY2llcztcbiJdfQ==