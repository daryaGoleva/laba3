"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.loadDefinitions = void 0;

var _types = _interopRequireDefault(require("../types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const applyMutations = (defaultDefs, definitionReducer) => {
  const mutatedDefinitionsMap = definitionReducer(defaultDefs);
  return mutatedDefinitionsMap;
};

const loadDefinitions = config => {
  const customTypesNames = [];
  const t = applyMutations({}, config.definitionResolver);
  Object.keys(t).forEach(typeDefName => {
    if (!t[typeDefName].name) {
      customTypesNames.push(typeDefName);
    }
  });
  const mutatedDefinitionsMap = applyMutations({ ..._types.default
  }, config.definitionResolver);
  customTypesNames.forEach(typeDefName => {
    mutatedDefinitionsMap[typeDefName].name = typeDefName;
  });
  return mutatedDefinitionsMap;
};

exports.loadDefinitions = loadDefinitions;

const resolveDefinition = (definition, ctx, node) => {
  if (!ctx.config.definitionResolver && typeof definition !== 'string') return definition;
  const definitionName = typeof definition === 'string' ? definition : definition.name;
  const definitionMap = ctx.definitions[ctx.openapiVersion === 2 ? 'OAS2' : 'OAS3'];
  const resolvedDefinition = definitionMap[definitionName] && definitionMap[definitionName].resolveType && definitionMap[definitionName].resolveType(node) !== definitionMap[definitionName].name ? definitionMap[definitionMap[definitionName].resolveType(node)] : definitionMap[definitionName];
  return resolvedDefinition;
};

var _default = resolveDefinition;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXNvbHZlRGVmaW5pdGlvbi9pbmRleC5qcyJdLCJuYW1lcyI6WyJhcHBseU11dGF0aW9ucyIsImRlZmF1bHREZWZzIiwiZGVmaW5pdGlvblJlZHVjZXIiLCJtdXRhdGVkRGVmaW5pdGlvbnNNYXAiLCJsb2FkRGVmaW5pdGlvbnMiLCJjb25maWciLCJjdXN0b21UeXBlc05hbWVzIiwidCIsImRlZmluaXRpb25SZXNvbHZlciIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwidHlwZURlZk5hbWUiLCJuYW1lIiwicHVzaCIsImRlZmF1bHREZWZpbml0aW9uc01hcCIsInJlc29sdmVEZWZpbml0aW9uIiwiZGVmaW5pdGlvbiIsImN0eCIsIm5vZGUiLCJkZWZpbml0aW9uTmFtZSIsImRlZmluaXRpb25NYXAiLCJkZWZpbml0aW9ucyIsIm9wZW5hcGlWZXJzaW9uIiwicmVzb2x2ZWREZWZpbml0aW9uIiwicmVzb2x2ZVR5cGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUdBLE1BQU1BLGNBQWMsR0FBRyxDQUFDQyxXQUFELEVBQWNDLGlCQUFkLEtBQW9DO0FBQ3pELFFBQU1DLHFCQUFxQixHQUFHRCxpQkFBaUIsQ0FBQ0QsV0FBRCxDQUEvQztBQUNBLFNBQU9FLHFCQUFQO0FBQ0QsQ0FIRDs7QUFLTyxNQUFNQyxlQUFlLEdBQUlDLE1BQUQsSUFBWTtBQUN6QyxRQUFNQyxnQkFBZ0IsR0FBRyxFQUF6QjtBQUNBLFFBQU1DLENBQUMsR0FBR1AsY0FBYyxDQUFDLEVBQUQsRUFBS0ssTUFBTSxDQUFDRyxrQkFBWixDQUF4QjtBQUNBQyxFQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWUgsQ0FBWixFQUFlSSxPQUFmLENBQXdCQyxXQUFELElBQWlCO0FBQ3RDLFFBQUksQ0FBQ0wsQ0FBQyxDQUFDSyxXQUFELENBQUQsQ0FBZUMsSUFBcEIsRUFBMEI7QUFDeEJQLE1BQUFBLGdCQUFnQixDQUFDUSxJQUFqQixDQUFzQkYsV0FBdEI7QUFDRDtBQUNGLEdBSkQ7QUFNQSxRQUFNVCxxQkFBcUIsR0FBR0gsY0FBYyxDQUMxQyxFQUFFLEdBQUdlO0FBQUwsR0FEMEMsRUFDWlYsTUFBTSxDQUFDRyxrQkFESyxDQUE1QztBQUdBRixFQUFBQSxnQkFBZ0IsQ0FBQ0ssT0FBakIsQ0FBMEJDLFdBQUQsSUFBaUI7QUFDeENULElBQUFBLHFCQUFxQixDQUFDUyxXQUFELENBQXJCLENBQW1DQyxJQUFuQyxHQUEwQ0QsV0FBMUM7QUFDRCxHQUZEO0FBR0EsU0FBT1QscUJBQVA7QUFDRCxDQWhCTTs7OztBQW1CUCxNQUFNYSxpQkFBaUIsR0FBRyxDQUFDQyxVQUFELEVBQWFDLEdBQWIsRUFBa0JDLElBQWxCLEtBQTJCO0FBQ25ELE1BQUksQ0FBQ0QsR0FBRyxDQUFDYixNQUFKLENBQVdHLGtCQUFaLElBQWtDLE9BQU9TLFVBQVAsS0FBc0IsUUFBNUQsRUFBc0UsT0FBT0EsVUFBUDtBQUN0RSxRQUFNRyxjQUFjLEdBQUcsT0FBT0gsVUFBUCxLQUFzQixRQUF0QixHQUFpQ0EsVUFBakMsR0FBOENBLFVBQVUsQ0FBQ0osSUFBaEY7QUFDQSxRQUFNUSxhQUFhLEdBQUdILEdBQUcsQ0FBQ0ksV0FBSixDQUFnQkosR0FBRyxDQUFDSyxjQUFKLEtBQXVCLENBQXZCLEdBQTJCLE1BQTNCLEdBQW9DLE1BQXBELENBQXRCO0FBRUEsUUFBTUMsa0JBQWtCLEdBQUdILGFBQWEsQ0FBQ0QsY0FBRCxDQUFiLElBQ3BCQyxhQUFhLENBQUNELGNBQUQsQ0FBYixDQUE4QkssV0FEVixJQUVwQkosYUFBYSxDQUFDRCxjQUFELENBQWIsQ0FBOEJLLFdBQTlCLENBQTBDTixJQUExQyxNQUFvREUsYUFBYSxDQUFDRCxjQUFELENBQWIsQ0FBOEJQLElBRjlELEdBR3ZCUSxhQUFhLENBQUNBLGFBQWEsQ0FBQ0QsY0FBRCxDQUFiLENBQThCSyxXQUE5QixDQUEwQ04sSUFBMUMsQ0FBRCxDQUhVLEdBSXZCRSxhQUFhLENBQUNELGNBQUQsQ0FKakI7QUFNQSxTQUFPSSxrQkFBUDtBQUNELENBWkQ7O2VBY2VSLGlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlZmF1bHREZWZpbml0aW9uc01hcCBmcm9tICcuLi90eXBlcyc7XG5cblxuY29uc3QgYXBwbHlNdXRhdGlvbnMgPSAoZGVmYXVsdERlZnMsIGRlZmluaXRpb25SZWR1Y2VyKSA9PiB7XG4gIGNvbnN0IG11dGF0ZWREZWZpbml0aW9uc01hcCA9IGRlZmluaXRpb25SZWR1Y2VyKGRlZmF1bHREZWZzKTtcbiAgcmV0dXJuIG11dGF0ZWREZWZpbml0aW9uc01hcDtcbn07XG5cbmV4cG9ydCBjb25zdCBsb2FkRGVmaW5pdGlvbnMgPSAoY29uZmlnKSA9PiB7XG4gIGNvbnN0IGN1c3RvbVR5cGVzTmFtZXMgPSBbXTtcbiAgY29uc3QgdCA9IGFwcGx5TXV0YXRpb25zKHt9LCBjb25maWcuZGVmaW5pdGlvblJlc29sdmVyKTtcbiAgT2JqZWN0LmtleXModCkuZm9yRWFjaCgodHlwZURlZk5hbWUpID0+IHtcbiAgICBpZiAoIXRbdHlwZURlZk5hbWVdLm5hbWUpIHtcbiAgICAgIGN1c3RvbVR5cGVzTmFtZXMucHVzaCh0eXBlRGVmTmFtZSk7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCBtdXRhdGVkRGVmaW5pdGlvbnNNYXAgPSBhcHBseU11dGF0aW9ucyhcbiAgICB7IC4uLmRlZmF1bHREZWZpbml0aW9uc01hcCB9LCBjb25maWcuZGVmaW5pdGlvblJlc29sdmVyLFxuICApO1xuICBjdXN0b21UeXBlc05hbWVzLmZvckVhY2goKHR5cGVEZWZOYW1lKSA9PiB7XG4gICAgbXV0YXRlZERlZmluaXRpb25zTWFwW3R5cGVEZWZOYW1lXS5uYW1lID0gdHlwZURlZk5hbWU7XG4gIH0pO1xuICByZXR1cm4gbXV0YXRlZERlZmluaXRpb25zTWFwO1xufTtcblxuXG5jb25zdCByZXNvbHZlRGVmaW5pdGlvbiA9IChkZWZpbml0aW9uLCBjdHgsIG5vZGUpID0+IHtcbiAgaWYgKCFjdHguY29uZmlnLmRlZmluaXRpb25SZXNvbHZlciAmJiB0eXBlb2YgZGVmaW5pdGlvbiAhPT0gJ3N0cmluZycpIHJldHVybiBkZWZpbml0aW9uO1xuICBjb25zdCBkZWZpbml0aW9uTmFtZSA9IHR5cGVvZiBkZWZpbml0aW9uID09PSAnc3RyaW5nJyA/IGRlZmluaXRpb24gOiBkZWZpbml0aW9uLm5hbWU7XG4gIGNvbnN0IGRlZmluaXRpb25NYXAgPSBjdHguZGVmaW5pdGlvbnNbY3R4Lm9wZW5hcGlWZXJzaW9uID09PSAyID8gJ09BUzInIDogJ09BUzMnXTtcblxuICBjb25zdCByZXNvbHZlZERlZmluaXRpb24gPSBkZWZpbml0aW9uTWFwW2RlZmluaXRpb25OYW1lXVxuICAgICAgJiYgZGVmaW5pdGlvbk1hcFtkZWZpbml0aW9uTmFtZV0ucmVzb2x2ZVR5cGVcbiAgICAgICYmIGRlZmluaXRpb25NYXBbZGVmaW5pdGlvbk5hbWVdLnJlc29sdmVUeXBlKG5vZGUpICE9PSBkZWZpbml0aW9uTWFwW2RlZmluaXRpb25OYW1lXS5uYW1lXG4gICAgPyBkZWZpbml0aW9uTWFwW2RlZmluaXRpb25NYXBbZGVmaW5pdGlvbk5hbWVdLnJlc29sdmVUeXBlKG5vZGUpXVxuICAgIDogZGVmaW5pdGlvbk1hcFtkZWZpbml0aW9uTmFtZV07XG5cbiAgcmV0dXJuIHJlc29sdmVkRGVmaW5pdGlvbjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVEZWZpbml0aW9uO1xuIl19