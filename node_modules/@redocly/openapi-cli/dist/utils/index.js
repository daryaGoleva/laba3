"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.matchesJsonSchemaType = matchesJsonSchemaType;
exports.lexicalDistance = lexicalDistance;
exports.getClosestString = getClosestString;
exports.isRef = isRef;
exports.debounce = debounce;
exports.match = match;
exports.readYaml = readYaml;
exports.fileNotFoundError = fileNotFoundError;
exports.getFile = exports.getLineNumberFromId = exports.outputYellow = exports.outputBgYellow = exports.outputBgRed = exports.outputGrey = exports.outputLightBlue = exports.outputBgLightBlue = exports.outputUnderline = exports.outputRed = exports.isFullyQualifiedUrl = exports.isUrl = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _minimatch = _interopRequireDefault(require("minimatch"));

var _fs = _interopRequireDefault(require("fs"));

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _config = require("../config");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @ts-check

/** @typedef {'string'|'number'|'integer'|'boolean'|'null'|'object'|'array'} JSONSchemaType */

/* eslint-disable import/prefer-default-export */
const urlPattern = new RegExp('^(https?:\\/\\/)?' // protocol
+ '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' // domain name
+ '((\\d{1,3}\\.){3}\\d{1,3}))' // OR ip (v4) address
+ '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' // port and path
+ '(\\?[;&a-z\\d%_.~+=-]*)?' // query string
+ '(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator

/* eslint-disable import/prefer-default-export */

const fullyQualifiedUrlPattern = new RegExp('^(https?:\\/\\/)' // protocol
+ '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' // domain name
+ '((\\d{1,3}\\.){3}\\d{1,3}))' // OR ip (v4) address
+ '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' // port and path
+ '(\\?[;&a-z\\d%_.~+=-]*)?' // query string
+ '(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator

const isUrl = string => urlPattern.test(string);

exports.isUrl = isUrl;

const isFullyQualifiedUrl = string => fullyQualifiedUrlPattern.test(string);

exports.isFullyQualifiedUrl = isFullyQualifiedUrl;

const outputRed = str => _chalk.default.red(str);

exports.outputRed = outputRed;

const outputUnderline = str => _chalk.default.underline(str);

exports.outputUnderline = outputUnderline;

const outputBgLightBlue = str => _chalk.default.bgBlueBright(str);

exports.outputBgLightBlue = outputBgLightBlue;

const outputLightBlue = str => _chalk.default.blueBright(str);

exports.outputLightBlue = outputLightBlue;

const outputGrey = str => _chalk.default.grey(str);

exports.outputGrey = outputGrey;

const outputBgRed = str => _chalk.default.bgRed(str);

exports.outputBgRed = outputBgRed;

const outputBgYellow = str => _chalk.default.bgYellow(str);

exports.outputBgYellow = outputBgYellow;

const outputYellow = str => _chalk.default.yellow(str);

exports.outputYellow = outputYellow;

const getLineNumberFromId = (source, charId) => {
  let lineNum = 1;
  let posNum = 0;

  for (let i = 0; i < charId; i += 1) {
    if (source[i] === '\n') {
      lineNum += 1;
      posNum = charId - i;
    }
  }

  return {
    lineNum,
    posNum
  };
};
/**
 * Checks if value matches specified JSON schema type
 *
 * @param {*} value - value to check
 * @param {JSONSchemaType} type - JSON Schema type
 * @returns string
 */


exports.getLineNumberFromId = getLineNumberFromId;

function matchesJsonSchemaType(value, type) {
  switch (type) {
    case 'array':
      return Array.isArray(value);

    case 'object':
      return typeof value === 'object' && value !== null && !Array.isArray(value);

    case 'null':
      return value === null;

    case 'integer':
      return Number.isInteger(value);

    default:
      // eslint-disable-next-line valid-typeof
      return typeof value === type;
  }
}
/**
  *
  * MIT License
  *
  * Copyright (c) 2019 GraphQL Contributors
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
  * in the Software without restriction, including without limitation the rights
  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  * copies of the Software, and to permit persons to whom the Software is
  * furnished to do so, subject to the following conditions:
  *
  * The above copyright notice and this permission notice shall be included in all
  * copies or substantial portions of the Software.
  *
  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  *
  * Computes the lexical distance between strings A and B.
  *
  * The "distance" between two strings is given by counting the minimum number
  * of edits needed to transform string A into string B. An edit can be an
  * insertion, deletion, or substitution of a single character, or a swap of two
  * adjacent characters.
  *
  * Includes a custom alteration from Damerau-Levenshtein to treat case changes
  * as a single edit which helps identify mis-cased values with an edit distance
  * of 1.
  *
  * This distance can be useful for detecting typos in input or sorting
  *
  * @param {string} aStr
  * @param {string} bStr
  * @return {number} distance in number of edits
  */


function lexicalDistance(aStr, bStr) {
  if (aStr === bStr) {
    return 0;
  }

  const d = [];
  const a = aStr.toLowerCase();
  const b = bStr.toLowerCase();
  const aLength = a.length;
  const bLength = b.length; // Any case change counts as a single edit

  if (a === b) {
    return 1;
  }

  for (let i = 0; i <= aLength; i++) {
    d[i] = [i];
  }

  for (let j = 1; j <= bLength; j++) {
    d[0][j] = j;
  }

  for (let i = 1; i <= aLength; i++) {
    for (let j = 1; j <= bLength; j++) {
      const cost = a[i - 1] === b[j - 1] ? 0 : 1;
      d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);

      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {
        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);
      }
    }
  }

  return d[aLength][bLength];
}

function getClosestString(given, others) {
  if (!others || others.length === 0) return null;
  let bestMatch = {
    string: others[0],
    distance: lexicalDistance(given, others[0])
  };

  for (let i = 0; i < others.length; i++) {
    const distance = lexicalDistance(given, others[i]);
    bestMatch = distance < bestMatch.distance ? {
      string: others[i],
      distance
    } : bestMatch;
  }

  if (bestMatch.distance <= 4) return bestMatch.string;
  return null;
}

const getFile = async link => {
  const resp = await (0, _nodeFetch.default)(link);
  return resp.text();
};

exports.getFile = getFile;

function isRef(node) {
  return node && Object.prototype.hasOwnProperty.call(node, '$ref');
}

function debounce(func, wait, immediate) {
  let timeout;
  return function executedFunction(...args) {
    const context = this;

    const later = () => {
      timeout = null;
      if (!immediate) func.apply(context, args);
    };

    const callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) func.apply(context, args);
  };
}

function match(url, pattern) {
  if (!pattern.match(/^https?:\/\//)) {
    // if pattern doesn't specify protocol directly, do not match against it
    url = url.replace(/^https?:\/\//, '');
  }

  return (0, _minimatch.default)(url, pattern);
} // we ignore this as in the bad-path we end up with terminating the process.
// eslint-disable-next-line consistent-return


function readYaml(filename) {
  let source;

  try {
    source = _fs.default.readFileSync(filename, 'utf-8');
  } catch (error) {
    const definitions = (0, _config.getDefinitionNames)();
    process.stderr.write(fileNotFoundError(filename, definitions));
    process.exit(1);
  }

  try {
    const document = _jsYaml.default.safeLoad(source, {
      filename
    });

    return {
      document,
      source
    };
  } catch (ex) {
    // console.log(ex);
    process.stderr.write(`Can't load yaml file. Error during parsing YAML source:\n${ex.message}\n`);
    process.exit(1);
  }
}

function fileNotFoundError(fName, definitions) {
  let errorMessage = `Can't find definition or file with name: ${_chalk.default.red(fName)}.\n`;

  if (definitions) {
    errorMessage = `${errorMessage}\nAvailable definitions:\n- ${definitions.join('\n- ')}\n`;
  }

  return errorMessage;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,