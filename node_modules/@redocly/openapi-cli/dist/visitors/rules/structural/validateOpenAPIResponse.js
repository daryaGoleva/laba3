"use strict";

class ValidateOpenAPIResponse {
  static get rule() {
    return 'oas3-schema/response';
  }

  get validators() {
    return {
      description(node, ctx) {
        if (node && !node.description && node.description !== '') {
          return ctx.createError(ctx.messageHelpers.missingRequiredField('description'), 'key');
        }

        if (typeof node.description !== 'string') {
          return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        }

        return [];
      }

    };
  }

  OpenAPIResponse() {
    return {
      onEnter: (node, definition, ctx) => ctx.validateFields(this.config, this.rule, this.validators)
    };
  }

}

module.exports = ValidateOpenAPIResponse;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9zdHJ1Y3R1cmFsL3ZhbGlkYXRlT3BlbkFQSVJlc3BvbnNlLmpzIl0sIm5hbWVzIjpbIlZhbGlkYXRlT3BlbkFQSVJlc3BvbnNlIiwicnVsZSIsInZhbGlkYXRvcnMiLCJkZXNjcmlwdGlvbiIsIm5vZGUiLCJjdHgiLCJjcmVhdGVFcnJvciIsIm1lc3NhZ2VIZWxwZXJzIiwibWlzc2luZ1JlcXVpcmVkRmllbGQiLCJmaWVsZFR5cGVNaXNtYXRjaE1lc3NhZ2VIZWxwZXIiLCJPcGVuQVBJUmVzcG9uc2UiLCJvbkVudGVyIiwiZGVmaW5pdGlvbiIsInZhbGlkYXRlRmllbGRzIiwiY29uZmlnIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSx1QkFBTixDQUE4QjtBQUM1QixhQUFXQyxJQUFYLEdBQWtCO0FBQ2hCLFdBQU8sc0JBQVA7QUFDRDs7QUFFRCxNQUFJQyxVQUFKLEdBQWlCO0FBQ2YsV0FBTztBQUNMQyxNQUFBQSxXQUFXLENBQUNDLElBQUQsRUFBT0MsR0FBUCxFQUFZO0FBQ3JCLFlBQUlELElBQUksSUFBSSxDQUFDQSxJQUFJLENBQUNELFdBQWQsSUFBNkJDLElBQUksQ0FBQ0QsV0FBTCxLQUFxQixFQUF0RCxFQUEwRDtBQUN4RCxpQkFBT0UsR0FBRyxDQUFDQyxXQUFKLENBQWdCRCxHQUFHLENBQUNFLGNBQUosQ0FBbUJDLG9CQUFuQixDQUF3QyxhQUF4QyxDQUFoQixFQUF3RSxLQUF4RSxDQUFQO0FBQ0Q7O0FBQ0QsWUFBSSxPQUFPSixJQUFJLENBQUNELFdBQVosS0FBNEIsUUFBaEMsRUFBMEM7QUFDeEMsaUJBQU9FLEdBQUcsQ0FBQ0MsV0FBSixDQUFnQkQsR0FBRyxDQUFDRSxjQUFKLENBQW1CRSw4QkFBbkIsQ0FBa0QsUUFBbEQsQ0FBaEIsRUFBNkUsT0FBN0UsQ0FBUDtBQUNEOztBQUNELGVBQU8sRUFBUDtBQUNEOztBQVRJLEtBQVA7QUFXRDs7QUFFREMsRUFBQUEsZUFBZSxHQUFHO0FBQ2hCLFdBQU87QUFDTEMsTUFBQUEsT0FBTyxFQUFFLENBQUNQLElBQUQsRUFBT1EsVUFBUCxFQUFtQlAsR0FBbkIsS0FBMkJBLEdBQUcsQ0FBQ1EsY0FBSixDQUNsQyxLQUFLQyxNQUQ2QixFQUNyQixLQUFLYixJQURnQixFQUNWLEtBQUtDLFVBREs7QUFEL0IsS0FBUDtBQUtEOztBQXpCMkI7O0FBNEI5QmEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCaEIsdUJBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgVmFsaWRhdGVPcGVuQVBJUmVzcG9uc2Uge1xuICBzdGF0aWMgZ2V0IHJ1bGUoKSB7XG4gICAgcmV0dXJuICdvYXMzLXNjaGVtYS9yZXNwb25zZSc7XG4gIH1cblxuICBnZXQgdmFsaWRhdG9ycygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGVzY3JpcHRpb24obm9kZSwgY3R4KSB7XG4gICAgICAgIGlmIChub2RlICYmICFub2RlLmRlc2NyaXB0aW9uICYmIG5vZGUuZGVzY3JpcHRpb24gIT09ICcnKSB7XG4gICAgICAgICAgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMubWlzc2luZ1JlcXVpcmVkRmllbGQoJ2Rlc2NyaXB0aW9uJyksICdrZXknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG5vZGUuZGVzY3JpcHRpb24gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMuZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyKCdzdHJpbmcnKSwgJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgT3BlbkFQSVJlc3BvbnNlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbkVudGVyOiAobm9kZSwgZGVmaW5pdGlvbiwgY3R4KSA9PiBjdHgudmFsaWRhdGVGaWVsZHMoXG4gICAgICAgIHRoaXMuY29uZmlnLCB0aGlzLnJ1bGUsIHRoaXMudmFsaWRhdG9ycyxcbiAgICAgICksXG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFZhbGlkYXRlT3BlbkFQSVJlc3BvbnNlO1xuIl19