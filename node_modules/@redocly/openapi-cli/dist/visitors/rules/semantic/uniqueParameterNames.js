"use strict";

var _OpenAPIOperation = _interopRequireDefault(require("../../../types/OAS3/OpenAPIOperation"));

var _OpenAPIPath = _interopRequireDefault(require("../../../types/OAS3/OpenAPIPath"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class UniqueParameterNames {
  static get rule() {
    return 'unique-parameter-names';
  }

  constructor(config) {
    this.config = config;
    this.currentOperationParameters = [];
    this.currentPathParameters = [];
  }

  OpenAPIComponents() {
    return {
      onExit: () => {
        this.currentOperationParameters = [];
        this.currentPathParameters = [];
      }
    };
  }

  OpenAPIOperation() {
    return {
      onExit: () => {
        this.currentOperationParameters = [];
      }
    };
  }

  OpenAPIPath() {
    return {
      onExit: () => {
        this.currentPathParameters = [];
      }
    };
  }

  OpenAPIParameter() {
    return {
      onEnter: (node, _, ctx) => {
        let error;
        let paramsList = [];

        if (ctx.definitionStack.includes(_OpenAPIOperation.default)) {
          paramsList = this.currentOperationParameters;
        } else if (ctx.definitionStack.includes(_OpenAPIPath.default)) {
          paramsList = this.currentPathParameters;
        } else {
          return [];
        }

        if (node.name && paramsList.includes(node.name)) {
          ctx.path.push('name');
          error = ctx.createError('Duplicate parameters are not allowed. This name is already used on this level.', 'value');
          ctx.path.pop();
        }

        if (node.name) {
          paramsList.push(node.name);
        }

        return error ? [error] : [];
      }
    };
  }

}

module.exports = UniqueParameterNames;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9zZW1hbnRpYy91bmlxdWVQYXJhbWV0ZXJOYW1lcy5qcyJdLCJuYW1lcyI6WyJVbmlxdWVQYXJhbWV0ZXJOYW1lcyIsInJ1bGUiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsImN1cnJlbnRPcGVyYXRpb25QYXJhbWV0ZXJzIiwiY3VycmVudFBhdGhQYXJhbWV0ZXJzIiwiT3BlbkFQSUNvbXBvbmVudHMiLCJvbkV4aXQiLCJPcGVuQVBJT3BlcmF0aW9uIiwiT3BlbkFQSVBhdGgiLCJPcGVuQVBJUGFyYW1ldGVyIiwib25FbnRlciIsIm5vZGUiLCJfIiwiY3R4IiwiZXJyb3IiLCJwYXJhbXNMaXN0IiwiZGVmaW5pdGlvblN0YWNrIiwiaW5jbHVkZXMiLCJuYW1lIiwicGF0aCIsInB1c2giLCJjcmVhdGVFcnJvciIsInBvcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxvQkFBTixDQUEyQjtBQUN6QixhQUFXQyxJQUFYLEdBQWtCO0FBQ2hCLFdBQU8sd0JBQVA7QUFDRDs7QUFFREMsRUFBQUEsV0FBVyxDQUFDQyxNQUFELEVBQVM7QUFDbEIsU0FBS0EsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsU0FBS0MsMEJBQUwsR0FBa0MsRUFBbEM7QUFDQSxTQUFLQyxxQkFBTCxHQUE2QixFQUE3QjtBQUNEOztBQUVEQyxFQUFBQSxpQkFBaUIsR0FBRztBQUNsQixXQUFPO0FBQ0xDLE1BQUFBLE1BQU0sRUFBRSxNQUFNO0FBQ1osYUFBS0gsMEJBQUwsR0FBa0MsRUFBbEM7QUFDQSxhQUFLQyxxQkFBTCxHQUE2QixFQUE3QjtBQUNEO0FBSkksS0FBUDtBQU1EOztBQUVERyxFQUFBQSxnQkFBZ0IsR0FBRztBQUNqQixXQUFPO0FBQ0xELE1BQUFBLE1BQU0sRUFBRSxNQUFNO0FBQ1osYUFBS0gsMEJBQUwsR0FBa0MsRUFBbEM7QUFDRDtBQUhJLEtBQVA7QUFLRDs7QUFFREssRUFBQUEsV0FBVyxHQUFHO0FBQ1osV0FBTztBQUNMRixNQUFBQSxNQUFNLEVBQUUsTUFBTTtBQUNaLGFBQUtGLHFCQUFMLEdBQTZCLEVBQTdCO0FBQ0Q7QUFISSxLQUFQO0FBS0Q7O0FBRURLLEVBQUFBLGdCQUFnQixHQUFHO0FBQ2pCLFdBQU87QUFDTEMsTUFBQUEsT0FBTyxFQUFFLENBQUNDLElBQUQsRUFBT0MsQ0FBUCxFQUFVQyxHQUFWLEtBQWtCO0FBQ3pCLFlBQUlDLEtBQUo7QUFFQSxZQUFJQyxVQUFVLEdBQUcsRUFBakI7O0FBRUEsWUFBSUYsR0FBRyxDQUFDRyxlQUFKLENBQW9CQyxRQUFwQixDQUE2QlYseUJBQTdCLENBQUosRUFBb0Q7QUFDbERRLFVBQUFBLFVBQVUsR0FBRyxLQUFLWiwwQkFBbEI7QUFDRCxTQUZELE1BRU8sSUFBSVUsR0FBRyxDQUFDRyxlQUFKLENBQW9CQyxRQUFwQixDQUE2QlQsb0JBQTdCLENBQUosRUFBK0M7QUFDcERPLFVBQUFBLFVBQVUsR0FBRyxLQUFLWCxxQkFBbEI7QUFDRCxTQUZNLE1BRUE7QUFDTCxpQkFBTyxFQUFQO0FBQ0Q7O0FBRUQsWUFBSU8sSUFBSSxDQUFDTyxJQUFMLElBQWFILFVBQVUsQ0FBQ0UsUUFBWCxDQUFvQk4sSUFBSSxDQUFDTyxJQUF6QixDQUFqQixFQUFpRDtBQUMvQ0wsVUFBQUEsR0FBRyxDQUFDTSxJQUFKLENBQVNDLElBQVQsQ0FBYyxNQUFkO0FBQ0FOLFVBQUFBLEtBQUssR0FBR0QsR0FBRyxDQUFDUSxXQUFKLENBQWdCLGdGQUFoQixFQUFrRyxPQUFsRyxDQUFSO0FBQ0FSLFVBQUFBLEdBQUcsQ0FBQ00sSUFBSixDQUFTRyxHQUFUO0FBQ0Q7O0FBQ0QsWUFBSVgsSUFBSSxDQUFDTyxJQUFULEVBQWU7QUFDYkgsVUFBQUEsVUFBVSxDQUFDSyxJQUFYLENBQWdCVCxJQUFJLENBQUNPLElBQXJCO0FBQ0Q7O0FBQ0QsZUFBT0osS0FBSyxHQUFHLENBQUNBLEtBQUQsQ0FBSCxHQUFhLEVBQXpCO0FBQ0Q7QUF2QkksS0FBUDtBQXlCRDs7QUE5RHdCOztBQWlFM0JTLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnpCLG9CQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPcGVuQVBJT3BlcmF0aW9uIGZyb20gJy4uLy4uLy4uL3R5cGVzL09BUzMvT3BlbkFQSU9wZXJhdGlvbic7XG5pbXBvcnQgT3BlbkFQSVBhdGggZnJvbSAnLi4vLi4vLi4vdHlwZXMvT0FTMy9PcGVuQVBJUGF0aCc7XG5cbmNsYXNzIFVuaXF1ZVBhcmFtZXRlck5hbWVzIHtcbiAgc3RhdGljIGdldCBydWxlKCkge1xuICAgIHJldHVybiAndW5pcXVlLXBhcmFtZXRlci1uYW1lcyc7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICB0aGlzLmN1cnJlbnRPcGVyYXRpb25QYXJhbWV0ZXJzID0gW107XG4gICAgdGhpcy5jdXJyZW50UGF0aFBhcmFtZXRlcnMgPSBbXTtcbiAgfVxuXG4gIE9wZW5BUElDb21wb25lbnRzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbkV4aXQ6ICgpID0+IHtcbiAgICAgICAgdGhpcy5jdXJyZW50T3BlcmF0aW9uUGFyYW1ldGVycyA9IFtdO1xuICAgICAgICB0aGlzLmN1cnJlbnRQYXRoUGFyYW1ldGVycyA9IFtdO1xuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgT3BlbkFQSU9wZXJhdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb25FeGl0OiAoKSA9PiB7XG4gICAgICAgIHRoaXMuY3VycmVudE9wZXJhdGlvblBhcmFtZXRlcnMgPSBbXTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIE9wZW5BUElQYXRoKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbkV4aXQ6ICgpID0+IHtcbiAgICAgICAgdGhpcy5jdXJyZW50UGF0aFBhcmFtZXRlcnMgPSBbXTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIE9wZW5BUElQYXJhbWV0ZXIoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uRW50ZXI6IChub2RlLCBfLCBjdHgpID0+IHtcbiAgICAgICAgbGV0IGVycm9yO1xuXG4gICAgICAgIGxldCBwYXJhbXNMaXN0ID0gW107XG5cbiAgICAgICAgaWYgKGN0eC5kZWZpbml0aW9uU3RhY2suaW5jbHVkZXMoT3BlbkFQSU9wZXJhdGlvbikpIHtcbiAgICAgICAgICBwYXJhbXNMaXN0ID0gdGhpcy5jdXJyZW50T3BlcmF0aW9uUGFyYW1ldGVycztcbiAgICAgICAgfSBlbHNlIGlmIChjdHguZGVmaW5pdGlvblN0YWNrLmluY2x1ZGVzKE9wZW5BUElQYXRoKSkge1xuICAgICAgICAgIHBhcmFtc0xpc3QgPSB0aGlzLmN1cnJlbnRQYXRoUGFyYW1ldGVycztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobm9kZS5uYW1lICYmIHBhcmFtc0xpc3QuaW5jbHVkZXMobm9kZS5uYW1lKSkge1xuICAgICAgICAgIGN0eC5wYXRoLnB1c2goJ25hbWUnKTtcbiAgICAgICAgICBlcnJvciA9IGN0eC5jcmVhdGVFcnJvcignRHVwbGljYXRlIHBhcmFtZXRlcnMgYXJlIG5vdCBhbGxvd2VkLiBUaGlzIG5hbWUgaXMgYWxyZWFkeSB1c2VkIG9uIHRoaXMgbGV2ZWwuJywgJ3ZhbHVlJyk7XG4gICAgICAgICAgY3R4LnBhdGgucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUubmFtZSkge1xuICAgICAgICAgIHBhcmFtc0xpc3QucHVzaChub2RlLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlcnJvciA/IFtlcnJvcl0gOiBbXTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFVuaXF1ZVBhcmFtZXRlck5hbWVzO1xuIl19