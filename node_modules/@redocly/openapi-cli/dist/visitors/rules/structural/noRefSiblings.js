"use strict";

var _OpenAPIDiscriminator = require("../../../types/OAS3/OpenAPIDiscriminator");

class NoRefSiblings {
  static get rule() {
    return 'no-$ref-siblings';
  }

  any() {
    return {
      onEnter: (node, definition, ctx, unresolvedNode) => {
        const errors = [];
        if (!unresolvedNode || typeof unresolvedNode !== 'object') return errors;
        const nodeKeys = Object.keys(unresolvedNode);
        if (nodeKeys.indexOf('$ref') === -1) return errors;

        if (nodeKeys.length > 1) {
          const tempPath = {
            path: ctx.path,
            filePath: ctx.filePath,
            source: ctx.source
          };
          const prevPathItem = ctx.pathStack[ctx.pathStack.length - 1];
          ctx.path = prevPathItem.path;
          ctx.filePath = prevPathItem.file;
          ctx.source = prevPathItem.source;

          for (let i = 0; i < nodeKeys.length; i++) {
            if (nodeKeys[i] !== '$ref' && nodeKeys[i] !== _OpenAPIDiscriminator.MAPPING_DATA_KEY) {
              ctx.path.push(nodeKeys[i]);
              const e = ctx.createError('No siblings are allowed inside object with $ref property.', 'key');
              errors.push(e);
              ctx.path.pop();
            }
          }

          ctx.source = tempPath.source;
          ctx.path = tempPath.path;
          ctx.filePath = tempPath.filePath;
        }

        return errors;
      }
    };
  }

}

module.exports = NoRefSiblings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9zdHJ1Y3R1cmFsL25vUmVmU2libGluZ3MuanMiXSwibmFtZXMiOlsiTm9SZWZTaWJsaW5ncyIsInJ1bGUiLCJhbnkiLCJvbkVudGVyIiwibm9kZSIsImRlZmluaXRpb24iLCJjdHgiLCJ1bnJlc29sdmVkTm9kZSIsImVycm9ycyIsIm5vZGVLZXlzIiwiT2JqZWN0Iiwia2V5cyIsImluZGV4T2YiLCJsZW5ndGgiLCJ0ZW1wUGF0aCIsInBhdGgiLCJmaWxlUGF0aCIsInNvdXJjZSIsInByZXZQYXRoSXRlbSIsInBhdGhTdGFjayIsImZpbGUiLCJpIiwiTUFQUElOR19EQVRBX0tFWSIsInB1c2giLCJlIiwiY3JlYXRlRXJyb3IiLCJwb3AiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLE1BQU1BLGFBQU4sQ0FBb0I7QUFDbEIsYUFBV0MsSUFBWCxHQUFrQjtBQUNoQixXQUFPLGtCQUFQO0FBQ0Q7O0FBRURDLEVBQUFBLEdBQUcsR0FBRztBQUNKLFdBQU87QUFDTEMsTUFBQUEsT0FBTyxFQUFFLENBQUNDLElBQUQsRUFBT0MsVUFBUCxFQUFtQkMsR0FBbkIsRUFBd0JDLGNBQXhCLEtBQTJDO0FBQ2xELGNBQU1DLE1BQU0sR0FBRyxFQUFmO0FBRUEsWUFBSSxDQUFDRCxjQUFELElBQW1CLE9BQU9BLGNBQVAsS0FBMEIsUUFBakQsRUFBMkQsT0FBT0MsTUFBUDtBQUUzRCxjQUFNQyxRQUFRLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSixjQUFaLENBQWpCO0FBQ0EsWUFBSUUsUUFBUSxDQUFDRyxPQUFULENBQWlCLE1BQWpCLE1BQTZCLENBQUMsQ0FBbEMsRUFBcUMsT0FBT0osTUFBUDs7QUFFckMsWUFBSUMsUUFBUSxDQUFDSSxNQUFULEdBQWtCLENBQXRCLEVBQXlCO0FBQ3ZCLGdCQUFNQyxRQUFRLEdBQUc7QUFDZkMsWUFBQUEsSUFBSSxFQUFFVCxHQUFHLENBQUNTLElBREs7QUFFZkMsWUFBQUEsUUFBUSxFQUFFVixHQUFHLENBQUNVLFFBRkM7QUFHZkMsWUFBQUEsTUFBTSxFQUFFWCxHQUFHLENBQUNXO0FBSEcsV0FBakI7QUFNQSxnQkFBTUMsWUFBWSxHQUFHWixHQUFHLENBQUNhLFNBQUosQ0FBY2IsR0FBRyxDQUFDYSxTQUFKLENBQWNOLE1BQWQsR0FBdUIsQ0FBckMsQ0FBckI7QUFFQVAsVUFBQUEsR0FBRyxDQUFDUyxJQUFKLEdBQVdHLFlBQVksQ0FBQ0gsSUFBeEI7QUFDQVQsVUFBQUEsR0FBRyxDQUFDVSxRQUFKLEdBQWVFLFlBQVksQ0FBQ0UsSUFBNUI7QUFDQWQsVUFBQUEsR0FBRyxDQUFDVyxNQUFKLEdBQWFDLFlBQVksQ0FBQ0QsTUFBMUI7O0FBRUEsZUFBSyxJQUFJSSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHWixRQUFRLENBQUNJLE1BQTdCLEVBQXFDUSxDQUFDLEVBQXRDLEVBQTBDO0FBQ3hDLGdCQUFJWixRQUFRLENBQUNZLENBQUQsQ0FBUixLQUFnQixNQUFoQixJQUEwQlosUUFBUSxDQUFDWSxDQUFELENBQVIsS0FBZ0JDLHNDQUE5QyxFQUFnRTtBQUM5RGhCLGNBQUFBLEdBQUcsQ0FBQ1MsSUFBSixDQUFTUSxJQUFULENBQWNkLFFBQVEsQ0FBQ1ksQ0FBRCxDQUF0QjtBQUNBLG9CQUFNRyxDQUFDLEdBQUdsQixHQUFHLENBQUNtQixXQUFKLENBQ1IsMkRBRFEsRUFFUixLQUZRLENBQVY7QUFJQWpCLGNBQUFBLE1BQU0sQ0FBQ2UsSUFBUCxDQUFZQyxDQUFaO0FBQ0FsQixjQUFBQSxHQUFHLENBQUNTLElBQUosQ0FBU1csR0FBVDtBQUNEO0FBQ0Y7O0FBRURwQixVQUFBQSxHQUFHLENBQUNXLE1BQUosR0FBYUgsUUFBUSxDQUFDRyxNQUF0QjtBQUNBWCxVQUFBQSxHQUFHLENBQUNTLElBQUosR0FBV0QsUUFBUSxDQUFDQyxJQUFwQjtBQUNBVCxVQUFBQSxHQUFHLENBQUNVLFFBQUosR0FBZUYsUUFBUSxDQUFDRSxRQUF4QjtBQUNEOztBQUVELGVBQU9SLE1BQVA7QUFDRDtBQXhDSSxLQUFQO0FBMENEOztBQWhEaUI7O0FBbURwQm1CLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjVCLGFBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTUFQUElOR19EQVRBX0tFWSB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL09BUzMvT3BlbkFQSURpc2NyaW1pbmF0b3InO1xuXG5jbGFzcyBOb1JlZlNpYmxpbmdzIHtcbiAgc3RhdGljIGdldCBydWxlKCkge1xuICAgIHJldHVybiAnbm8tJHJlZi1zaWJsaW5ncyc7XG4gIH1cblxuICBhbnkoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uRW50ZXI6IChub2RlLCBkZWZpbml0aW9uLCBjdHgsIHVucmVzb2x2ZWROb2RlKSA9PiB7XG4gICAgICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuXG4gICAgICAgIGlmICghdW5yZXNvbHZlZE5vZGUgfHwgdHlwZW9mIHVucmVzb2x2ZWROb2RlICE9PSAnb2JqZWN0JykgcmV0dXJuIGVycm9ycztcblxuICAgICAgICBjb25zdCBub2RlS2V5cyA9IE9iamVjdC5rZXlzKHVucmVzb2x2ZWROb2RlKTtcbiAgICAgICAgaWYgKG5vZGVLZXlzLmluZGV4T2YoJyRyZWYnKSA9PT0gLTEpIHJldHVybiBlcnJvcnM7XG5cbiAgICAgICAgaWYgKG5vZGVLZXlzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBjb25zdCB0ZW1wUGF0aCA9IHtcbiAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgZmlsZVBhdGg6IGN0eC5maWxlUGF0aCxcbiAgICAgICAgICAgIHNvdXJjZTogY3R4LnNvdXJjZSxcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgY29uc3QgcHJldlBhdGhJdGVtID0gY3R4LnBhdGhTdGFja1tjdHgucGF0aFN0YWNrLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgICAgY3R4LnBhdGggPSBwcmV2UGF0aEl0ZW0ucGF0aDtcbiAgICAgICAgICBjdHguZmlsZVBhdGggPSBwcmV2UGF0aEl0ZW0uZmlsZTtcbiAgICAgICAgICBjdHguc291cmNlID0gcHJldlBhdGhJdGVtLnNvdXJjZTtcblxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChub2RlS2V5c1tpXSAhPT0gJyRyZWYnICYmIG5vZGVLZXlzW2ldICE9PSBNQVBQSU5HX0RBVEFfS0VZKSB7XG4gICAgICAgICAgICAgIGN0eC5wYXRoLnB1c2gobm9kZUtleXNbaV0pO1xuICAgICAgICAgICAgICBjb25zdCBlID0gY3R4LmNyZWF0ZUVycm9yKFxuICAgICAgICAgICAgICAgICdObyBzaWJsaW5ncyBhcmUgYWxsb3dlZCBpbnNpZGUgb2JqZWN0IHdpdGggJHJlZiBwcm9wZXJ0eS4nLFxuICAgICAgICAgICAgICAgICdrZXknLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBlcnJvcnMucHVzaChlKTtcbiAgICAgICAgICAgICAgY3R4LnBhdGgucG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3R4LnNvdXJjZSA9IHRlbXBQYXRoLnNvdXJjZTtcbiAgICAgICAgICBjdHgucGF0aCA9IHRlbXBQYXRoLnBhdGg7XG4gICAgICAgICAgY3R4LmZpbGVQYXRoID0gdGVtcFBhdGguZmlsZVBhdGg7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgICAgfSxcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTm9SZWZTaWJsaW5ncztcbiJdfQ==