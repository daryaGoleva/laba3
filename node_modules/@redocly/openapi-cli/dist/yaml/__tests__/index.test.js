"use strict";

var _fs = _interopRequireDefault(require("fs"));

var _index = require("../index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("getLocationByPath", () => {
  test("", () => {
    const context = {
      source: _fs.default.readFileSync("./definitions/syntetic/syntetic-1.yaml", "utf-8")
    };
    expect((0, _index.getLocationByPath)(["paths", "user", "get", "responses", "200"], context, "key")).toMatchInlineSnapshot(`
      Object {
        "endCol": 14,
        "endIndex": 456,
        "endLine": 25,
        "startCol": 9,
        "startIndex": 451,
        "startLine": 25,
      }
    `);
  });
  test("", () => {
    const context = {
      source: _fs.default.readFileSync("./definitions/syntetic/syntetic-1.yaml", "utf-8")
    };
    expect((0, _index.getLocationByPath)([""], context, "key")).toMatchInlineSnapshot(`
      Object {
        "endCol": 14,
        "endIndex": 14,
        "endLine": 1,
        "startCol": 0,
        "startIndex": 0,
        "startLine": 1,
      }
    `);
  });
  test("", () => {
    const context = {
      source: _fs.default.readFileSync("./definitions/syntetic/syntetic-1.yaml", "utf-8")
    };
    expect((0, _index.getLocationByPath)(["paths", "user", "parameters", "0"], context, "key")).toMatchInlineSnapshot(`
      Object {
        "endCol": 47,
        "endIndex": 361,
        "endLine": 20,
        "startCol": 9,
        "startIndex": 322,
        "startLine": 20,
      }
    `);
  });
  test("", () => {
    const context = {
      source: _fs.default.readFileSync("./definitions/syntetic/syntetic-1.yaml", "utf-8")
    };
    expect((0, _index.getLocationByPath)(["paths", "user", "parameters", "0", "ttt"], context, "key")).toMatchInlineSnapshot(`
      Object {
        "endCol": 47,
        "endIndex": 361,
        "endLine": 20,
        "startCol": 9,
        "startIndex": 322,
        "startLine": 20,
      }
    `);
  });
  test("", () => {
    const context = {
      source: _fs.default.readFileSync("./definitions/syntetic/syntetic-1.yaml", "utf-8")
    };
    expect((0, _index.getLocationByPath)(["paths", "user", "get", "responses", "200"], context, "value")).toMatchInlineSnapshot(`
      Object {
        "endCol": 28,
        "endIndex": 600,
        "endLine": 30,
        "startCol": 9,
        "startIndex": 451,
        "startLine": 25,
      }
    `);
  });
});
describe("getCodeFrameForLocation", () => {
  test("", () => {
    const source = _fs.default.readFileSync("./definitions/syntetic/syntetic-1.yaml", "utf-8");

    expect((0, _index.getCodeFrameForLocation)(276, 281, source)).toMatchInlineSnapshot(`
"[90m1| [39m
[90m0| servers:[39m
[90m1|   - url: 'http://example[4m[31m.org'[39m[90m[24m[39m
[90m2|[39m[31m [39m
[90m3| paths:[39m
[90m4|   user:[39m"
`);
  });
  test("", () => {
    const source = _fs.default.readFileSync("./definitions/syntetic/syntetic-1.yaml", "utf-8");

    expect((0, _index.getCodeFrameForLocation)(276, 425, source)).toMatchInlineSnapshot(`
"[90m-1| [39m
[90m00| servers:[39m
[90m01|   - url: 'http://example[4m[31m.org'[39m[90m[24m[39m
[90m02|[39m[31m [4m[31m[39m[31m[24m[39m
[90m03|[39m[31m [4m[31mpaths:[39m[31m[24m[39m
[90m04|[39m[31m [4m[31m  user:[39m[31m[24m[39m
[90m05|[39m[31m [4m[31m    parameters:[39m[31m[24m[39m
[90m06|[39m[31m [4m[31m      - $ref: '#/components/parameters/example'[39m[31m[24m[39m
[90m07|[39m[31m [4m[31m    get:[39m[31m[24m[39m
[90m08|[39m[31m [4m[31m      operationId: userGet[39m[31m[24m[39m
[90m09|[39m[31m [4m[31m      description: Get user[39m[31m[24m[39m
[90m10|       responses:[39m
[90m11|         '200':[39m"
`);
  });
  test("", () => {
    const source = _fs.default.readFileSync("./definitions/syntetic/syntetic-1.yaml", "utf-8");

    expect((0, _index.getCodeFrameForLocation)(0, 7, source)).toMatchInlineSnapshot(`
"[90m1| [4m[31mopenapi[39m[90m[24m: 3.0.2[39m
[90m2| info:[39m
[90m3|   x-redocly-overlay:[39m"
`);
  });
  test("", () => {
    const source = _fs.default.readFileSync("./definitions/syntetic/syntetic-1.yaml", "utf-8");

    expect((0, _index.getCodeFrameForLocation)(0, 14, source)).toMatchInlineSnapshot(`
"[90m1|[39m[31m [4m[31mopenapi: 3.0.2[39m[31m[24m[39m
[90m2| info:[39m
[90m3|   x-redocly-overlay:[39m"
`);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy95YW1sL19fdGVzdHNfXy9pbmRleC50ZXN0LmpzIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwidGVzdCIsImNvbnRleHQiLCJzb3VyY2UiLCJmcyIsInJlYWRGaWxlU3luYyIsImV4cGVjdCIsInRvTWF0Y2hJbmxpbmVTbmFwc2hvdCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7OztBQUVBQSxRQUFRLENBQUMsbUJBQUQsRUFBc0IsTUFBTTtBQUNsQ0MsRUFBQUEsSUFBSSxDQUFDLEVBQUQsRUFBSyxNQUFNO0FBQ2IsVUFBTUMsT0FBTyxHQUFHO0FBQ2RDLE1BQUFBLE1BQU0sRUFBRUMsWUFBR0MsWUFBSCxDQUNOLHdDQURNLEVBRU4sT0FGTTtBQURNLEtBQWhCO0FBT0FDLElBQUFBLE1BQU0sQ0FDSiw4QkFDRSxDQUFDLE9BQUQsRUFBVSxNQUFWLEVBQWtCLEtBQWxCLEVBQXlCLFdBQXpCLEVBQXNDLEtBQXRDLENBREYsRUFFRUosT0FGRixFQUdFLEtBSEYsQ0FESSxDQUFOLENBTUVLLHFCQU5GLENBTXlCOzs7Ozs7Ozs7S0FOekI7QUFnQkQsR0F4QkcsQ0FBSjtBQTBCQU4sRUFBQUEsSUFBSSxDQUFDLEVBQUQsRUFBSyxNQUFNO0FBQ2IsVUFBTUMsT0FBTyxHQUFHO0FBQ2RDLE1BQUFBLE1BQU0sRUFBRUMsWUFBR0MsWUFBSCxDQUNOLHdDQURNLEVBRU4sT0FGTTtBQURNLEtBQWhCO0FBT0FDLElBQUFBLE1BQU0sQ0FBQyw4QkFBa0IsQ0FBQyxFQUFELENBQWxCLEVBQXdCSixPQUF4QixFQUFpQyxLQUFqQyxDQUFELENBQU4sQ0FBZ0RLLHFCQUFoRCxDQUF1RTs7Ozs7Ozs7O0tBQXZFO0FBVUQsR0FsQkcsQ0FBSjtBQW9CQU4sRUFBQUEsSUFBSSxDQUFDLEVBQUQsRUFBSyxNQUFNO0FBQ2IsVUFBTUMsT0FBTyxHQUFHO0FBQ2RDLE1BQUFBLE1BQU0sRUFBRUMsWUFBR0MsWUFBSCxDQUNOLHdDQURNLEVBRU4sT0FGTTtBQURNLEtBQWhCO0FBT0FDLElBQUFBLE1BQU0sQ0FDSiw4QkFBa0IsQ0FBQyxPQUFELEVBQVUsTUFBVixFQUFrQixZQUFsQixFQUFnQyxHQUFoQyxDQUFsQixFQUF3REosT0FBeEQsRUFBaUUsS0FBakUsQ0FESSxDQUFOLENBRUVLLHFCQUZGLENBRXlCOzs7Ozs7Ozs7S0FGekI7QUFZRCxHQXBCRyxDQUFKO0FBc0JBTixFQUFBQSxJQUFJLENBQUMsRUFBRCxFQUFLLE1BQU07QUFDYixVQUFNQyxPQUFPLEdBQUc7QUFDZEMsTUFBQUEsTUFBTSxFQUFFQyxZQUFHQyxZQUFILENBQ04sd0NBRE0sRUFFTixPQUZNO0FBRE0sS0FBaEI7QUFPQUMsSUFBQUEsTUFBTSxDQUNKLDhCQUNFLENBQUMsT0FBRCxFQUFVLE1BQVYsRUFBa0IsWUFBbEIsRUFBZ0MsR0FBaEMsRUFBcUMsS0FBckMsQ0FERixFQUVFSixPQUZGLEVBR0UsS0FIRixDQURJLENBQU4sQ0FNRUsscUJBTkYsQ0FNeUI7Ozs7Ozs7OztLQU56QjtBQWdCRCxHQXhCRyxDQUFKO0FBMEJBTixFQUFBQSxJQUFJLENBQUMsRUFBRCxFQUFLLE1BQU07QUFDYixVQUFNQyxPQUFPLEdBQUc7QUFDZEMsTUFBQUEsTUFBTSxFQUFFQyxZQUFHQyxZQUFILENBQ04sd0NBRE0sRUFFTixPQUZNO0FBRE0sS0FBaEI7QUFPQUMsSUFBQUEsTUFBTSxDQUNKLDhCQUNFLENBQUMsT0FBRCxFQUFVLE1BQVYsRUFBa0IsS0FBbEIsRUFBeUIsV0FBekIsRUFBc0MsS0FBdEMsQ0FERixFQUVFSixPQUZGLEVBR0UsT0FIRixDQURJLENBQU4sQ0FNRUsscUJBTkYsQ0FNeUI7Ozs7Ozs7OztLQU56QjtBQWdCRCxHQXhCRyxDQUFKO0FBeUJELENBeEhPLENBQVI7QUEwSEFQLFFBQVEsQ0FBQyx5QkFBRCxFQUE0QixNQUFNO0FBQ3hDQyxFQUFBQSxJQUFJLENBQUMsRUFBRCxFQUFLLE1BQU07QUFDYixVQUFNRSxNQUFNLEdBQUdDLFlBQUdDLFlBQUgsQ0FDYix3Q0FEYSxFQUViLE9BRmEsQ0FBZjs7QUFJQUMsSUFBQUEsTUFBTSxDQUFDLG9DQUF3QixHQUF4QixFQUE2QixHQUE3QixFQUFrQ0gsTUFBbEMsQ0FBRCxDQUFOLENBQWtESSxxQkFBbEQsQ0FBeUU7Ozs7Ozs7Q0FBekU7QUFRRCxHQWJHLENBQUo7QUFlQU4sRUFBQUEsSUFBSSxDQUFDLEVBQUQsRUFBSyxNQUFNO0FBQ2IsVUFBTUUsTUFBTSxHQUFHQyxZQUFHQyxZQUFILENBQ2Isd0NBRGEsRUFFYixPQUZhLENBQWY7O0FBSUFDLElBQUFBLE1BQU0sQ0FBQyxvQ0FBd0IsR0FBeEIsRUFBNkIsR0FBN0IsRUFBa0NILE1BQWxDLENBQUQsQ0FBTixDQUFrREkscUJBQWxELENBQXlFOzs7Ozs7Ozs7Ozs7OztDQUF6RTtBQWVELEdBcEJHLENBQUo7QUFzQkFOLEVBQUFBLElBQUksQ0FBQyxFQUFELEVBQUssTUFBTTtBQUNiLFVBQU1FLE1BQU0sR0FBR0MsWUFBR0MsWUFBSCxDQUNiLHdDQURhLEVBRWIsT0FGYSxDQUFmOztBQUlBQyxJQUFBQSxNQUFNLENBQUMsb0NBQXdCLENBQXhCLEVBQTJCLENBQTNCLEVBQThCSCxNQUE5QixDQUFELENBQU4sQ0FBOENJLHFCQUE5QyxDQUFxRTs7OztDQUFyRTtBQUtELEdBVkcsQ0FBSjtBQVlBTixFQUFBQSxJQUFJLENBQUMsRUFBRCxFQUFLLE1BQU07QUFDYixVQUFNRSxNQUFNLEdBQUdDLFlBQUdDLFlBQUgsQ0FDYix3Q0FEYSxFQUViLE9BRmEsQ0FBZjs7QUFJQUMsSUFBQUEsTUFBTSxDQUFDLG9DQUF3QixDQUF4QixFQUEyQixFQUEzQixFQUErQkgsTUFBL0IsQ0FBRCxDQUFOLENBQStDSSxxQkFBL0MsQ0FBc0U7Ozs7Q0FBdEU7QUFLRCxHQVZHLENBQUo7QUFXRCxDQTdETyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0IHsgZ2V0TG9jYXRpb25CeVBhdGgsIGdldENvZGVGcmFtZUZvckxvY2F0aW9uIH0gZnJvbSBcIi4uL2luZGV4XCI7XG5cbmRlc2NyaWJlKFwiZ2V0TG9jYXRpb25CeVBhdGhcIiwgKCkgPT4ge1xuICB0ZXN0KFwiXCIsICgpID0+IHtcbiAgICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgc291cmNlOiBmcy5yZWFkRmlsZVN5bmMoXG4gICAgICAgIFwiLi9kZWZpbml0aW9ucy9zeW50ZXRpYy9zeW50ZXRpYy0xLnlhbWxcIixcbiAgICAgICAgXCJ1dGYtOFwiXG4gICAgICApLFxuICAgIH07XG5cbiAgICBleHBlY3QoXG4gICAgICBnZXRMb2NhdGlvbkJ5UGF0aChcbiAgICAgICAgW1wicGF0aHNcIiwgXCJ1c2VyXCIsIFwiZ2V0XCIsIFwicmVzcG9uc2VzXCIsIFwiMjAwXCJdLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBcImtleVwiXG4gICAgICApXG4gICAgKS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuICAgICAgT2JqZWN0IHtcbiAgICAgICAgXCJlbmRDb2xcIjogMTQsXG4gICAgICAgIFwiZW5kSW5kZXhcIjogNDU2LFxuICAgICAgICBcImVuZExpbmVcIjogMjUsXG4gICAgICAgIFwic3RhcnRDb2xcIjogOSxcbiAgICAgICAgXCJzdGFydEluZGV4XCI6IDQ1MSxcbiAgICAgICAgXCJzdGFydExpbmVcIjogMjUsXG4gICAgICB9XG4gICAgYCk7XG4gIH0pO1xuXG4gIHRlc3QoXCJcIiwgKCkgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgICBzb3VyY2U6IGZzLnJlYWRGaWxlU3luYyhcbiAgICAgICAgXCIuL2RlZmluaXRpb25zL3N5bnRldGljL3N5bnRldGljLTEueWFtbFwiLFxuICAgICAgICBcInV0Zi04XCJcbiAgICAgICksXG4gICAgfTtcblxuICAgIGV4cGVjdChnZXRMb2NhdGlvbkJ5UGF0aChbXCJcIl0sIGNvbnRleHQsIFwia2V5XCIpKS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuICAgICAgT2JqZWN0IHtcbiAgICAgICAgXCJlbmRDb2xcIjogMTQsXG4gICAgICAgIFwiZW5kSW5kZXhcIjogMTQsXG4gICAgICAgIFwiZW5kTGluZVwiOiAxLFxuICAgICAgICBcInN0YXJ0Q29sXCI6IDAsXG4gICAgICAgIFwic3RhcnRJbmRleFwiOiAwLFxuICAgICAgICBcInN0YXJ0TGluZVwiOiAxLFxuICAgICAgfVxuICAgIGApO1xuICB9KTtcblxuICB0ZXN0KFwiXCIsICgpID0+IHtcbiAgICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgc291cmNlOiBmcy5yZWFkRmlsZVN5bmMoXG4gICAgICAgIFwiLi9kZWZpbml0aW9ucy9zeW50ZXRpYy9zeW50ZXRpYy0xLnlhbWxcIixcbiAgICAgICAgXCJ1dGYtOFwiXG4gICAgICApLFxuICAgIH07XG5cbiAgICBleHBlY3QoXG4gICAgICBnZXRMb2NhdGlvbkJ5UGF0aChbXCJwYXRoc1wiLCBcInVzZXJcIiwgXCJwYXJhbWV0ZXJzXCIsIFwiMFwiXSwgY29udGV4dCwgXCJrZXlcIilcbiAgICApLnRvTWF0Y2hJbmxpbmVTbmFwc2hvdChgXG4gICAgICBPYmplY3Qge1xuICAgICAgICBcImVuZENvbFwiOiA0NyxcbiAgICAgICAgXCJlbmRJbmRleFwiOiAzNjEsXG4gICAgICAgIFwiZW5kTGluZVwiOiAyMCxcbiAgICAgICAgXCJzdGFydENvbFwiOiA5LFxuICAgICAgICBcInN0YXJ0SW5kZXhcIjogMzIyLFxuICAgICAgICBcInN0YXJ0TGluZVwiOiAyMCxcbiAgICAgIH1cbiAgICBgKTtcbiAgfSk7XG5cbiAgdGVzdChcIlwiLCAoKSA9PiB7XG4gICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgIHNvdXJjZTogZnMucmVhZEZpbGVTeW5jKFxuICAgICAgICBcIi4vZGVmaW5pdGlvbnMvc3ludGV0aWMvc3ludGV0aWMtMS55YW1sXCIsXG4gICAgICAgIFwidXRmLThcIlxuICAgICAgKSxcbiAgICB9O1xuXG4gICAgZXhwZWN0KFxuICAgICAgZ2V0TG9jYXRpb25CeVBhdGgoXG4gICAgICAgIFtcInBhdGhzXCIsIFwidXNlclwiLCBcInBhcmFtZXRlcnNcIiwgXCIwXCIsIFwidHR0XCJdLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBcImtleVwiXG4gICAgICApXG4gICAgKS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuICAgICAgT2JqZWN0IHtcbiAgICAgICAgXCJlbmRDb2xcIjogNDcsXG4gICAgICAgIFwiZW5kSW5kZXhcIjogMzYxLFxuICAgICAgICBcImVuZExpbmVcIjogMjAsXG4gICAgICAgIFwic3RhcnRDb2xcIjogOSxcbiAgICAgICAgXCJzdGFydEluZGV4XCI6IDMyMixcbiAgICAgICAgXCJzdGFydExpbmVcIjogMjAsXG4gICAgICB9XG4gICAgYCk7XG4gIH0pO1xuXG4gIHRlc3QoXCJcIiwgKCkgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgICBzb3VyY2U6IGZzLnJlYWRGaWxlU3luYyhcbiAgICAgICAgXCIuL2RlZmluaXRpb25zL3N5bnRldGljL3N5bnRldGljLTEueWFtbFwiLFxuICAgICAgICBcInV0Zi04XCJcbiAgICAgICksXG4gICAgfTtcblxuICAgIGV4cGVjdChcbiAgICAgIGdldExvY2F0aW9uQnlQYXRoKFxuICAgICAgICBbXCJwYXRoc1wiLCBcInVzZXJcIiwgXCJnZXRcIiwgXCJyZXNwb25zZXNcIiwgXCIyMDBcIl0sXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIFwidmFsdWVcIlxuICAgICAgKVxuICAgICkudG9NYXRjaElubGluZVNuYXBzaG90KGBcbiAgICAgIE9iamVjdCB7XG4gICAgICAgIFwiZW5kQ29sXCI6IDI4LFxuICAgICAgICBcImVuZEluZGV4XCI6IDYwMCxcbiAgICAgICAgXCJlbmRMaW5lXCI6IDMwLFxuICAgICAgICBcInN0YXJ0Q29sXCI6IDksXG4gICAgICAgIFwic3RhcnRJbmRleFwiOiA0NTEsXG4gICAgICAgIFwic3RhcnRMaW5lXCI6IDI1LFxuICAgICAgfVxuICAgIGApO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZShcImdldENvZGVGcmFtZUZvckxvY2F0aW9uXCIsICgpID0+IHtcbiAgdGVzdChcIlwiLCAoKSA9PiB7XG4gICAgY29uc3Qgc291cmNlID0gZnMucmVhZEZpbGVTeW5jKFxuICAgICAgXCIuL2RlZmluaXRpb25zL3N5bnRldGljL3N5bnRldGljLTEueWFtbFwiLFxuICAgICAgXCJ1dGYtOFwiXG4gICAgKTtcbiAgICBleHBlY3QoZ2V0Q29kZUZyYW1lRm9yTG9jYXRpb24oMjc2LCAyODEsIHNvdXJjZSkpLnRvTWF0Y2hJbmxpbmVTbmFwc2hvdChgXG5cIlx1MDAxYls5MG0xfCBcdTAwMWJbMzltXG5cdTAwMWJbOTBtMHwgc2VydmVyczpcdTAwMWJbMzltXG5cdTAwMWJbOTBtMXwgICAtIHVybDogJ2h0dHA6Ly9leGFtcGxlXHUwMDFiWzRtXHUwMDFiWzMxbS5vcmcnXHUwMDFiWzM5bVx1MDAxYls5MG1cdTAwMWJbMjRtXHUwMDFiWzM5bVxuXHUwMDFiWzkwbTJ8XHUwMDFiWzM5bVx1MDAxYlszMW0gXHUwMDFiWzM5bVxuXHUwMDFiWzkwbTN8IHBhdGhzOlx1MDAxYlszOW1cblx1MDAxYls5MG00fCAgIHVzZXI6XHUwMDFiWzM5bVwiXG5gKTtcbiAgfSk7XG5cbiAgdGVzdChcIlwiLCAoKSA9PiB7XG4gICAgY29uc3Qgc291cmNlID0gZnMucmVhZEZpbGVTeW5jKFxuICAgICAgXCIuL2RlZmluaXRpb25zL3N5bnRldGljL3N5bnRldGljLTEueWFtbFwiLFxuICAgICAgXCJ1dGYtOFwiXG4gICAgKTtcbiAgICBleHBlY3QoZ2V0Q29kZUZyYW1lRm9yTG9jYXRpb24oMjc2LCA0MjUsIHNvdXJjZSkpLnRvTWF0Y2hJbmxpbmVTbmFwc2hvdChgXG5cIlx1MDAxYls5MG0tMXwgXHUwMDFiWzM5bVxuXHUwMDFiWzkwbTAwfCBzZXJ2ZXJzOlx1MDAxYlszOW1cblx1MDAxYls5MG0wMXwgICAtIHVybDogJ2h0dHA6Ly9leGFtcGxlXHUwMDFiWzRtXHUwMDFiWzMxbS5vcmcnXHUwMDFiWzM5bVx1MDAxYls5MG1cdTAwMWJbMjRtXHUwMDFiWzM5bVxuXHUwMDFiWzkwbTAyfFx1MDAxYlszOW1cdTAwMWJbMzFtIFx1MDAxYls0bVx1MDAxYlszMW1cdTAwMWJbMzltXHUwMDFiWzMxbVx1MDAxYlsyNG1cdTAwMWJbMzltXG5cdTAwMWJbOTBtMDN8XHUwMDFiWzM5bVx1MDAxYlszMW0gXHUwMDFiWzRtXHUwMDFiWzMxbXBhdGhzOlx1MDAxYlszOW1cdTAwMWJbMzFtXHUwMDFiWzI0bVx1MDAxYlszOW1cblx1MDAxYls5MG0wNHxcdTAwMWJbMzltXHUwMDFiWzMxbSBcdTAwMWJbNG1cdTAwMWJbMzFtICB1c2VyOlx1MDAxYlszOW1cdTAwMWJbMzFtXHUwMDFiWzI0bVx1MDAxYlszOW1cblx1MDAxYls5MG0wNXxcdTAwMWJbMzltXHUwMDFiWzMxbSBcdTAwMWJbNG1cdTAwMWJbMzFtICAgIHBhcmFtZXRlcnM6XHUwMDFiWzM5bVx1MDAxYlszMW1cdTAwMWJbMjRtXHUwMDFiWzM5bVxuXHUwMDFiWzkwbTA2fFx1MDAxYlszOW1cdTAwMWJbMzFtIFx1MDAxYls0bVx1MDAxYlszMW0gICAgICAtICRyZWY6ICcjL2NvbXBvbmVudHMvcGFyYW1ldGVycy9leGFtcGxlJ1x1MDAxYlszOW1cdTAwMWJbMzFtXHUwMDFiWzI0bVx1MDAxYlszOW1cblx1MDAxYls5MG0wN3xcdTAwMWJbMzltXHUwMDFiWzMxbSBcdTAwMWJbNG1cdTAwMWJbMzFtICAgIGdldDpcdTAwMWJbMzltXHUwMDFiWzMxbVx1MDAxYlsyNG1cdTAwMWJbMzltXG5cdTAwMWJbOTBtMDh8XHUwMDFiWzM5bVx1MDAxYlszMW0gXHUwMDFiWzRtXHUwMDFiWzMxbSAgICAgIG9wZXJhdGlvbklkOiB1c2VyR2V0XHUwMDFiWzM5bVx1MDAxYlszMW1cdTAwMWJbMjRtXHUwMDFiWzM5bVxuXHUwMDFiWzkwbTA5fFx1MDAxYlszOW1cdTAwMWJbMzFtIFx1MDAxYls0bVx1MDAxYlszMW0gICAgICBkZXNjcmlwdGlvbjogR2V0IHVzZXJcdTAwMWJbMzltXHUwMDFiWzMxbVx1MDAxYlsyNG1cdTAwMWJbMzltXG5cdTAwMWJbOTBtMTB8ICAgICAgIHJlc3BvbnNlczpcdTAwMWJbMzltXG5cdTAwMWJbOTBtMTF8ICAgICAgICAgJzIwMCc6XHUwMDFiWzM5bVwiXG5gKTtcbiAgfSk7XG5cbiAgdGVzdChcIlwiLCAoKSA9PiB7XG4gICAgY29uc3Qgc291cmNlID0gZnMucmVhZEZpbGVTeW5jKFxuICAgICAgXCIuL2RlZmluaXRpb25zL3N5bnRldGljL3N5bnRldGljLTEueWFtbFwiLFxuICAgICAgXCJ1dGYtOFwiXG4gICAgKTtcbiAgICBleHBlY3QoZ2V0Q29kZUZyYW1lRm9yTG9jYXRpb24oMCwgNywgc291cmNlKSkudG9NYXRjaElubGluZVNuYXBzaG90KGBcblwiXHUwMDFiWzkwbTF8IFx1MDAxYls0bVx1MDAxYlszMW1vcGVuYXBpXHUwMDFiWzM5bVx1MDAxYls5MG1cdTAwMWJbMjRtOiAzLjAuMlx1MDAxYlszOW1cblx1MDAxYls5MG0yfCBpbmZvOlx1MDAxYlszOW1cblx1MDAxYls5MG0zfCAgIHgtcmVkb2NseS1vdmVybGF5Olx1MDAxYlszOW1cIlxuYCk7XG4gIH0pO1xuXG4gIHRlc3QoXCJcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHNvdXJjZSA9IGZzLnJlYWRGaWxlU3luYyhcbiAgICAgIFwiLi9kZWZpbml0aW9ucy9zeW50ZXRpYy9zeW50ZXRpYy0xLnlhbWxcIixcbiAgICAgIFwidXRmLThcIlxuICAgICk7XG4gICAgZXhwZWN0KGdldENvZGVGcmFtZUZvckxvY2F0aW9uKDAsIDE0LCBzb3VyY2UpKS50b01hdGNoSW5saW5lU25hcHNob3QoYFxuXCJcdTAwMWJbOTBtMXxcdTAwMWJbMzltXHUwMDFiWzMxbSBcdTAwMWJbNG1cdTAwMWJbMzFtb3BlbmFwaTogMy4wLjJcdTAwMWJbMzltXHUwMDFiWzMxbVx1MDAxYlsyNG1cdTAwMWJbMzltXG5cdTAwMWJbOTBtMnwgaW5mbzpcdTAwMWJbMzltXG5cdTAwMWJbOTBtM3wgICB4LXJlZG9jbHktb3ZlcmxheTpcdTAwMWJbMzltXCJcbmApO1xuICB9KTtcbn0pO1xuIl19