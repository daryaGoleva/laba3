"use strict";

class ValidateAuthorizationCodeOpenAPIFlow {
  static get rule() {
    return 'oas3-schema/auth-code-flow';
  }

  get validators() {
    return {
      authorizationUrl(node, ctx) {
        if (!node.authorizationUrl) return ctx.createError(ctx.messageHelpers.missingRequiredField('authorizationUrl'), 'key');
        if (typeof node.authorizationUrl !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      tokenUrl(node, ctx) {
        if (!node.tokenUrl) return ctx.createError(ctx.messageHelpers.missingRequiredField('tokenUrl'), 'key');
        if (typeof node.tokenUrl !== 'string') return ctx.createError(ctx.messageHelpers.fieldTypeMismatchMessageHelper('string'), 'value');
        return null;
      },

      refreshUrl(node, ctx) {
        if (node.refreshUrl && typeof node.refreshUrl !== 'string') return ctx.createError('The refreshUrl must be a string in the OpenAPI Flow Object', 'value');
        return null;
      },

      scopes(node, ctx) {
        if (!node.scopes) {
          return null;
        }

        const wrongFormatMap = Object.keys(node.scopes).filter(scope => typeof scope !== 'string' || typeof node.scopes[scope] !== 'string').length > 0;
        if (wrongFormatMap) return ctx.createError('The scopes field must be a Map[string, string] in the OpenAPI Flow Object', 'value');
        return null;
      }

    };
  }

  AuthorizationCodeOpenAPIFlow() {
    return {
      onEnter: (node, definition, ctx) => ctx.validateFields(this.config, this.rule, this.validators)
    };
  }

}

module.exports = ValidateAuthorizationCodeOpenAPIFlow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9zdHJ1Y3R1cmFsL3ZhbGlkYXRlQXV0aG9yaXphdGlvbkNvZGVPcGVuQVBJRmxvdy5qcyJdLCJuYW1lcyI6WyJWYWxpZGF0ZUF1dGhvcml6YXRpb25Db2RlT3BlbkFQSUZsb3ciLCJydWxlIiwidmFsaWRhdG9ycyIsImF1dGhvcml6YXRpb25VcmwiLCJub2RlIiwiY3R4IiwiY3JlYXRlRXJyb3IiLCJtZXNzYWdlSGVscGVycyIsIm1pc3NpbmdSZXF1aXJlZEZpZWxkIiwiZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyIiwidG9rZW5VcmwiLCJyZWZyZXNoVXJsIiwic2NvcGVzIiwid3JvbmdGb3JtYXRNYXAiLCJPYmplY3QiLCJrZXlzIiwiZmlsdGVyIiwic2NvcGUiLCJsZW5ndGgiLCJBdXRob3JpemF0aW9uQ29kZU9wZW5BUElGbG93Iiwib25FbnRlciIsImRlZmluaXRpb24iLCJ2YWxpZGF0ZUZpZWxkcyIsImNvbmZpZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTUEsb0NBQU4sQ0FBMkM7QUFDekMsYUFBV0MsSUFBWCxHQUFrQjtBQUNoQixXQUFPLDRCQUFQO0FBQ0Q7O0FBRUQsTUFBSUMsVUFBSixHQUFpQjtBQUNmLFdBQU87QUFDTEMsTUFBQUEsZ0JBQWdCLENBQUNDLElBQUQsRUFBT0MsR0FBUCxFQUFZO0FBQzFCLFlBQUksQ0FBQ0QsSUFBSSxDQUFDRCxnQkFBVixFQUE0QixPQUFPRSxHQUFHLENBQUNDLFdBQUosQ0FBZ0JELEdBQUcsQ0FBQ0UsY0FBSixDQUFtQkMsb0JBQW5CLENBQXdDLGtCQUF4QyxDQUFoQixFQUE2RSxLQUE3RSxDQUFQO0FBQzVCLFlBQUksT0FBT0osSUFBSSxDQUFDRCxnQkFBWixLQUFpQyxRQUFyQyxFQUErQyxPQUFPRSxHQUFHLENBQUNDLFdBQUosQ0FBZ0JELEdBQUcsQ0FBQ0UsY0FBSixDQUFtQkUsOEJBQW5CLENBQWtELFFBQWxELENBQWhCLEVBQTZFLE9BQTdFLENBQVA7QUFDL0MsZUFBTyxJQUFQO0FBQ0QsT0FMSTs7QUFNTEMsTUFBQUEsUUFBUSxDQUFDTixJQUFELEVBQU9DLEdBQVAsRUFBWTtBQUNsQixZQUFJLENBQUNELElBQUksQ0FBQ00sUUFBVixFQUFvQixPQUFPTCxHQUFHLENBQUNDLFdBQUosQ0FBZ0JELEdBQUcsQ0FBQ0UsY0FBSixDQUFtQkMsb0JBQW5CLENBQXdDLFVBQXhDLENBQWhCLEVBQXFFLEtBQXJFLENBQVA7QUFDcEIsWUFBSSxPQUFPSixJQUFJLENBQUNNLFFBQVosS0FBeUIsUUFBN0IsRUFBdUMsT0FBT0wsR0FBRyxDQUFDQyxXQUFKLENBQWdCRCxHQUFHLENBQUNFLGNBQUosQ0FBbUJFLDhCQUFuQixDQUFrRCxRQUFsRCxDQUFoQixFQUE2RSxPQUE3RSxDQUFQO0FBQ3ZDLGVBQU8sSUFBUDtBQUNELE9BVkk7O0FBV0xFLE1BQUFBLFVBQVUsQ0FBQ1AsSUFBRCxFQUFPQyxHQUFQLEVBQVk7QUFDcEIsWUFBSUQsSUFBSSxDQUFDTyxVQUFMLElBQW1CLE9BQU9QLElBQUksQ0FBQ08sVUFBWixLQUEyQixRQUFsRCxFQUE0RCxPQUFPTixHQUFHLENBQUNDLFdBQUosQ0FBZ0IsNERBQWhCLEVBQThFLE9BQTlFLENBQVA7QUFDNUQsZUFBTyxJQUFQO0FBQ0QsT0FkSTs7QUFlTE0sTUFBQUEsTUFBTSxDQUFDUixJQUFELEVBQU9DLEdBQVAsRUFBWTtBQUNoQixZQUFJLENBQUNELElBQUksQ0FBQ1EsTUFBVixFQUFrQjtBQUNoQixpQkFBTyxJQUFQO0FBQ0Q7O0FBQ0QsY0FBTUMsY0FBYyxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWVgsSUFBSSxDQUFDUSxNQUFqQixFQUNwQkksTUFEb0IsQ0FDWkMsS0FBRCxJQUFXLE9BQU9BLEtBQVAsS0FBaUIsUUFBakIsSUFBNkIsT0FBT2IsSUFBSSxDQUFDUSxNQUFMLENBQVlLLEtBQVosQ0FBUCxLQUE4QixRQUR6RCxFQUVwQkMsTUFGb0IsR0FFWCxDQUZaO0FBR0EsWUFBSUwsY0FBSixFQUFvQixPQUFPUixHQUFHLENBQUNDLFdBQUosQ0FBZ0IsMkVBQWhCLEVBQTZGLE9BQTdGLENBQVA7QUFDcEIsZUFBTyxJQUFQO0FBQ0Q7O0FBeEJJLEtBQVA7QUEwQkQ7O0FBRURhLEVBQUFBLDRCQUE0QixHQUFHO0FBQzdCLFdBQU87QUFDTEMsTUFBQUEsT0FBTyxFQUFFLENBQUNoQixJQUFELEVBQU9pQixVQUFQLEVBQW1CaEIsR0FBbkIsS0FBMkJBLEdBQUcsQ0FBQ2lCLGNBQUosQ0FDbEMsS0FBS0MsTUFENkIsRUFDckIsS0FBS3RCLElBRGdCLEVBQ1YsS0FBS0MsVUFESztBQUQvQixLQUFQO0FBS0Q7O0FBeEN3Qzs7QUEyQzNDc0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCekIsb0NBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgVmFsaWRhdGVBdXRob3JpemF0aW9uQ29kZU9wZW5BUElGbG93IHtcbiAgc3RhdGljIGdldCBydWxlKCkge1xuICAgIHJldHVybiAnb2FzMy1zY2hlbWEvYXV0aC1jb2RlLWZsb3cnO1xuICB9XG5cbiAgZ2V0IHZhbGlkYXRvcnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGF1dGhvcml6YXRpb25Vcmwobm9kZSwgY3R4KSB7XG4gICAgICAgIGlmICghbm9kZS5hdXRob3JpemF0aW9uVXJsKSByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKGN0eC5tZXNzYWdlSGVscGVycy5taXNzaW5nUmVxdWlyZWRGaWVsZCgnYXV0aG9yaXphdGlvblVybCcpLCAna2V5Jyk7XG4gICAgICAgIGlmICh0eXBlb2Ygbm9kZS5hdXRob3JpemF0aW9uVXJsICE9PSAnc3RyaW5nJykgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcihjdHgubWVzc2FnZUhlbHBlcnMuZmllbGRUeXBlTWlzbWF0Y2hNZXNzYWdlSGVscGVyKCdzdHJpbmcnKSwgJ3ZhbHVlJyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcbiAgICAgIHRva2VuVXJsKG5vZGUsIGN0eCkge1xuICAgICAgICBpZiAoIW5vZGUudG9rZW5VcmwpIHJldHVybiBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLm1pc3NpbmdSZXF1aXJlZEZpZWxkKCd0b2tlblVybCcpLCAna2V5Jyk7XG4gICAgICAgIGlmICh0eXBlb2Ygbm9kZS50b2tlblVybCAhPT0gJ3N0cmluZycpIHJldHVybiBjdHguY3JlYXRlRXJyb3IoY3R4Lm1lc3NhZ2VIZWxwZXJzLmZpZWxkVHlwZU1pc21hdGNoTWVzc2FnZUhlbHBlcignc3RyaW5nJyksICd2YWx1ZScpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sXG4gICAgICByZWZyZXNoVXJsKG5vZGUsIGN0eCkge1xuICAgICAgICBpZiAobm9kZS5yZWZyZXNoVXJsICYmIHR5cGVvZiBub2RlLnJlZnJlc2hVcmwgIT09ICdzdHJpbmcnKSByZXR1cm4gY3R4LmNyZWF0ZUVycm9yKCdUaGUgcmVmcmVzaFVybCBtdXN0IGJlIGEgc3RyaW5nIGluIHRoZSBPcGVuQVBJIEZsb3cgT2JqZWN0JywgJ3ZhbHVlJyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSxcbiAgICAgIHNjb3Blcyhub2RlLCBjdHgpIHtcbiAgICAgICAgaWYgKCFub2RlLnNjb3Blcykge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHdyb25nRm9ybWF0TWFwID0gT2JqZWN0LmtleXMobm9kZS5zY29wZXMpXG4gICAgICAgICAgLmZpbHRlcigoc2NvcGUpID0+IHR5cGVvZiBzY29wZSAhPT0gJ3N0cmluZycgfHwgdHlwZW9mIG5vZGUuc2NvcGVzW3Njb3BlXSAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgLmxlbmd0aCA+IDA7XG4gICAgICAgIGlmICh3cm9uZ0Zvcm1hdE1hcCkgcmV0dXJuIGN0eC5jcmVhdGVFcnJvcignVGhlIHNjb3BlcyBmaWVsZCBtdXN0IGJlIGEgTWFwW3N0cmluZywgc3RyaW5nXSBpbiB0aGUgT3BlbkFQSSBGbG93IE9iamVjdCcsICd2YWx1ZScpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIEF1dGhvcml6YXRpb25Db2RlT3BlbkFQSUZsb3coKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uRW50ZXI6IChub2RlLCBkZWZpbml0aW9uLCBjdHgpID0+IGN0eC52YWxpZGF0ZUZpZWxkcyhcbiAgICAgICAgdGhpcy5jb25maWcsIHRoaXMucnVsZSwgdGhpcy52YWxpZGF0b3JzLFxuICAgICAgKSxcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVmFsaWRhdGVBdXRob3JpemF0aW9uQ29kZU9wZW5BUElGbG93O1xuIl19