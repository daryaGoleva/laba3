"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConfig = getConfig;
exports.getLintConfig = getLintConfig;
exports.getDefinitionNames = getDefinitionNames;
exports.getFallbackEntryPointsOrExit = getFallbackEntryPointsOrExit;

var _fs = _interopRequireDefault(require("fs"));

var _mergeDeep = _interopRequireDefault(require("merge-deep"));

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var path = _interopRequireWildcard(require("path"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let warningShown = false;

function getConfig(options) {
  let config = {};
  let {
    configPath
  } = options;

  if (!configPath) {
    configPath = `${process.cwd()}/.openapi-cli.yaml`;

    if (_fs.default.existsSync('.redocly.yaml')) {
      configPath = path.resolve('.redocly.yaml');
    } else if (_fs.default.existsSync('.redocly.yml')) {
      configPath = path.resolve('.redocly.yml');
    } else if (_fs.default.existsSync('.openapi-cli.yaml')) {
      if (!warningShown) process.stderr.write('warning: .openapi-cli.yaml is deprecated, rename to .redocly.yaml\n');
      configPath = path.resolve('.openapi-cli.yaml');
    } else if (_fs.default.existsSync('.openapi-cli.yml')) {
      if (!warningShown) process.stderr.write('warning: .openapi-cli.yml is deprecated, rename to .redocly.yml\n');
      configPath = path.resolve('.openapi-cli.yml');
    }
  }

  const defaultConfigRaw = _fs.default.readFileSync(`${__dirname}/.redocly.yaml`, 'utf-8');

  const defaultConfig = _jsYaml.default.safeLoad(defaultConfigRaw);

  if (_fs.default.existsSync(configPath)) {
    const configRaw = _fs.default.readFileSync(configPath, 'utf-8');

    config = _jsYaml.default.safeLoad(configRaw);

    if (config.rules || config.transformers || config.typeExtension || config.customRules) {
      if (!warningShown) {
        process.stderr.write('warning: top level "rules", "transformers", "typeExtension" and "customRules" ' + 'are deprecated. Move them under the "lint" field.\n');
      }

      warningShown = true;
      config = {
        lint: config
      };
    }
  }

  const resolvedConfig = (0, _mergeDeep.default)(defaultConfig, config, options);
  resolvedConfig.configPath = configPath;
  const lintConfig = resolvedConfig.lint;

  if (!lintConfig.typeExtension) {
    lintConfig.typeExtension = `${__dirname}/typeExtensionDefault.js`;
  } else {
    lintConfig.typeExtension = `${process.cwd()}/${lintConfig.typeExtension}`;
  }

  const definitionResolver = require(lintConfig.typeExtension);

  lintConfig.definitionResolver = definitionResolver;
  lintConfig.customRules = lintConfig.customRules ? `${process.cwd()}/${lintConfig.customRules}` : `${__dirname}/customRulesDefault.js`;

  const rulesExtensions = require(lintConfig.customRules);

  lintConfig.rulesExtensions = rulesExtensions;
  lintConfig.transformers = lintConfig.transformers ? `${process.cwd()}/${lintConfig.transformers}` : `${__dirname}/customRulesDefault.js`;

  const transformingVisitors = require(lintConfig.transformers);

  lintConfig.transformingVisitors = transformingVisitors;

  if (!resolvedConfig.lint) {
    resolvedConfig.lint = {};
  }

  resolvedConfig.lint.headers = (resolvedConfig.resolve && resolvedConfig.resolve.http && resolvedConfig.resolve.http.headers || []).map(header => ({ ...header,
    value: header.envVariable ? process.env[header.envVariable] : header.value
  }));
  return resolvedConfig;
}

function getLintConfig(options) {
  return getConfig(options).lint;
}

function getDefinitionNames(config = getConfig({})) {
  return config.apiDefinitions ? Object.keys(config.apiDefinitions) : null;
}

function getFallbackEntryPointsOrExit(argsEntrypoints, config = getConfig({})) {
  let res = argsEntrypoints;

  if ((!argsEntrypoints || !argsEntrypoints.length) && config.apiDefinitions && Object.keys(config.apiDefinitions).length > 0) {
    res = Object.values(config.apiDefinitions);
  } else if (argsEntrypoints && argsEntrypoints.length && config.apiDefinitions) {
    res = res.map(aliasOrPath => config.apiDefinitions[aliasOrPath] || aliasOrPath);
  }

  if (!res || !res.length) {
    process.stderr.write('error: missing required argument "entryPoints"\n');
    process.exit(1);
  }

  return res;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,