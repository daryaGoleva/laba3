"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateFromFile = exports.validateFromUrl = exports.validate = void 0;

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _OAS = require("./types/OAS3");

var _OAS2 = require("./types/OAS2");

var _error = require("./error");

var _utils = require("./utils");

var _config = require("./config");

var _traverse = _interopRequireDefault(require("./traverse"));

var _context = _interopRequireDefault(require("./context"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-param-reassign */
const validate = async (document, yamlSource, filePath, options = {}) => {
  if (!document.openapi && !document.swagger && !document.$ref) return [];
  const config = (0, _config.getLintConfig)(options);
  config.rules.bundler = 'off';
  const ctx = (0, _context.default)(document, yamlSource, filePath, config);
  ctx.getRule = ctx.getRule.bind(null, ctx);
  const rootNode = ctx.openapiVersion === 3 ? _OAS.OpenAPIRoot : _OAS2.OAS2Root;
  await (0, _traverse.default)(document, rootNode, ctx);
  const filtered = ctx.result.filter(msg => {
    for (let j = 0; j < ctx.customRules.length; j++) {
      if (msg.fromRule === ctx.customRules[j]) {
        if (ctx.customRules[j].config.excludePaths) {
          const fullPath = `${msg.file}#/${msg.path.join('/')}`;
          return ctx.customRules[j].config.excludePaths.indexOf(fullPath) === -1;
        }

        return true;
      }
    }

    return true;
  });
  return filtered;
};

exports.validate = validate;

const validateFromUrl = async (link, options) => {
  const source = await (0, _utils.getFile)(link);
  let document;

  try {
    document = _jsYaml.default.safeLoad(source);
  } catch (ex) {
    return [(0, _error.createYAMLParseError)(ex, {}, link, source, true)];
  }

  const validationResult = await validate(document, source, link, options);
  return validationResult;
};

exports.validateFromUrl = validateFromUrl;

const validateFromFile = async (fName, options) => {
  const resolvedFileName = fName; // path.resolve(fName);

  const {
    document,
    source
  } = (0, _utils.readYaml)(resolvedFileName);
  const validationResult = await validate(document, source, resolvedFileName, options);
  return validationResult;
};

exports.validateFromFile = validateFromFile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy92YWxpZGF0ZS5qcyJdLCJuYW1lcyI6WyJ2YWxpZGF0ZSIsImRvY3VtZW50IiwieWFtbFNvdXJjZSIsImZpbGVQYXRoIiwib3B0aW9ucyIsIm9wZW5hcGkiLCJzd2FnZ2VyIiwiJHJlZiIsImNvbmZpZyIsInJ1bGVzIiwiYnVuZGxlciIsImN0eCIsImdldFJ1bGUiLCJiaW5kIiwicm9vdE5vZGUiLCJvcGVuYXBpVmVyc2lvbiIsIk9wZW5BUElSb290IiwiT0FTMlJvb3QiLCJmaWx0ZXJlZCIsInJlc3VsdCIsImZpbHRlciIsIm1zZyIsImoiLCJjdXN0b21SdWxlcyIsImxlbmd0aCIsImZyb21SdWxlIiwiZXhjbHVkZVBhdGhzIiwiZnVsbFBhdGgiLCJmaWxlIiwicGF0aCIsImpvaW4iLCJpbmRleE9mIiwidmFsaWRhdGVGcm9tVXJsIiwibGluayIsInNvdXJjZSIsInlhbWwiLCJzYWZlTG9hZCIsImV4IiwidmFsaWRhdGlvblJlc3VsdCIsInZhbGlkYXRlRnJvbUZpbGUiLCJmTmFtZSIsInJlc29sdmVkRmlsZU5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQTs7QUFFQTs7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFDQTs7QUFDQTs7OztBQVpBO0FBY08sTUFBTUEsUUFBUSxHQUFHLE9BQU9DLFFBQVAsRUFBaUJDLFVBQWpCLEVBQTZCQyxRQUE3QixFQUF1Q0MsT0FBTyxHQUFHLEVBQWpELEtBQXdEO0FBQzlFLE1BQUksQ0FBQ0gsUUFBUSxDQUFDSSxPQUFWLElBQXFCLENBQUNKLFFBQVEsQ0FBQ0ssT0FBL0IsSUFBMEMsQ0FBQ0wsUUFBUSxDQUFDTSxJQUF4RCxFQUE4RCxPQUFPLEVBQVA7QUFFOUQsUUFBTUMsTUFBTSxHQUFHLDJCQUFjSixPQUFkLENBQWY7QUFDQUksRUFBQUEsTUFBTSxDQUFDQyxLQUFQLENBQWFDLE9BQWIsR0FBdUIsS0FBdkI7QUFFQSxRQUFNQyxHQUFHLEdBQUcsc0JBQWNWLFFBQWQsRUFBd0JDLFVBQXhCLEVBQW9DQyxRQUFwQyxFQUE4Q0ssTUFBOUMsQ0FBWjtBQUVBRyxFQUFBQSxHQUFHLENBQUNDLE9BQUosR0FBY0QsR0FBRyxDQUFDQyxPQUFKLENBQVlDLElBQVosQ0FBaUIsSUFBakIsRUFBdUJGLEdBQXZCLENBQWQ7QUFFQSxRQUFNRyxRQUFRLEdBQUdILEdBQUcsQ0FBQ0ksY0FBSixLQUF1QixDQUF2QixHQUEyQkMsZ0JBQTNCLEdBQXlDQyxjQUExRDtBQUNBLFFBQU0sdUJBQWFoQixRQUFiLEVBQXVCYSxRQUF2QixFQUFpQ0gsR0FBakMsQ0FBTjtBQUVBLFFBQU1PLFFBQVEsR0FBR1AsR0FBRyxDQUFDUSxNQUFKLENBQVdDLE1BQVgsQ0FBbUJDLEdBQUQsSUFBUztBQUMxQyxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdYLEdBQUcsQ0FBQ1ksV0FBSixDQUFnQkMsTUFBcEMsRUFBNENGLENBQUMsRUFBN0MsRUFBaUQ7QUFDL0MsVUFBSUQsR0FBRyxDQUFDSSxRQUFKLEtBQWlCZCxHQUFHLENBQUNZLFdBQUosQ0FBZ0JELENBQWhCLENBQXJCLEVBQXlDO0FBQ3ZDLFlBQUlYLEdBQUcsQ0FBQ1ksV0FBSixDQUFnQkQsQ0FBaEIsRUFBbUJkLE1BQW5CLENBQTBCa0IsWUFBOUIsRUFBNEM7QUFDMUMsZ0JBQU1DLFFBQVEsR0FBSSxHQUFFTixHQUFHLENBQUNPLElBQUssS0FBSVAsR0FBRyxDQUFDUSxJQUFKLENBQVNDLElBQVQsQ0FBYyxHQUFkLENBQW1CLEVBQXBEO0FBQ0EsaUJBQU9uQixHQUFHLENBQUNZLFdBQUosQ0FBZ0JELENBQWhCLEVBQW1CZCxNQUFuQixDQUEwQmtCLFlBQTFCLENBQXVDSyxPQUF2QyxDQUErQ0osUUFBL0MsTUFBNkQsQ0FBQyxDQUFyRTtBQUNEOztBQUNELGVBQU8sSUFBUDtBQUNEO0FBQ0Y7O0FBQ0QsV0FBTyxJQUFQO0FBQ0QsR0FYZ0IsQ0FBakI7QUFhQSxTQUFPVCxRQUFQO0FBQ0QsQ0EzQk07Ozs7QUE2QkEsTUFBTWMsZUFBZSxHQUFHLE9BQU9DLElBQVAsRUFBYTdCLE9BQWIsS0FBeUI7QUFDdEQsUUFBTThCLE1BQU0sR0FBRyxNQUFNLG9CQUFRRCxJQUFSLENBQXJCO0FBQ0EsTUFBSWhDLFFBQUo7O0FBQ0EsTUFBSTtBQUNGQSxJQUFBQSxRQUFRLEdBQUdrQyxnQkFBS0MsUUFBTCxDQUFjRixNQUFkLENBQVg7QUFDRCxHQUZELENBRUUsT0FBT0csRUFBUCxFQUFXO0FBQ1gsV0FBTyxDQUFDLGlDQUFxQkEsRUFBckIsRUFBeUIsRUFBekIsRUFBNkJKLElBQTdCLEVBQW1DQyxNQUFuQyxFQUEyQyxJQUEzQyxDQUFELENBQVA7QUFDRDs7QUFDRCxRQUFNSSxnQkFBZ0IsR0FBRyxNQUFNdEMsUUFBUSxDQUFDQyxRQUFELEVBQVdpQyxNQUFYLEVBQW1CRCxJQUFuQixFQUF5QjdCLE9BQXpCLENBQXZDO0FBQ0EsU0FBT2tDLGdCQUFQO0FBQ0QsQ0FWTTs7OztBQVlBLE1BQU1DLGdCQUFnQixHQUFHLE9BQU9DLEtBQVAsRUFBY3BDLE9BQWQsS0FBMEI7QUFDeEQsUUFBTXFDLGdCQUFnQixHQUFHRCxLQUF6QixDQUR3RCxDQUN4Qjs7QUFDaEMsUUFBTTtBQUFFdkMsSUFBQUEsUUFBRjtBQUFZaUMsSUFBQUE7QUFBWixNQUF1QixxQkFBU08sZ0JBQVQsQ0FBN0I7QUFDQSxRQUFNSCxnQkFBZ0IsR0FBRyxNQUFNdEMsUUFBUSxDQUFDQyxRQUFELEVBQVdpQyxNQUFYLEVBQW1CTyxnQkFBbkIsRUFBcUNyQyxPQUFyQyxDQUF2QztBQUNBLFNBQU9rQyxnQkFBUDtBQUNELENBTE0iLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuaW1wb3J0IHlhbWwgZnJvbSAnanMteWFtbCc7XG5cbmltcG9ydCB7IE9wZW5BUElSb290IH0gZnJvbSAnLi90eXBlcy9PQVMzJztcbmltcG9ydCB7IE9BUzJSb290IH0gZnJvbSAnLi90eXBlcy9PQVMyJztcblxuaW1wb3J0IHsgY3JlYXRlWUFNTFBhcnNlRXJyb3IgfSBmcm9tICcuL2Vycm9yJztcblxuaW1wb3J0IHsgZ2V0RmlsZSwgcmVhZFlhbWwgfSBmcm9tICcuL3V0aWxzJztcblxuaW1wb3J0IHsgZ2V0TGludENvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB0cmF2ZXJzZU5vZGUgZnJvbSAnLi90cmF2ZXJzZSc7XG5pbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tICcuL2NvbnRleHQnO1xuXG5leHBvcnQgY29uc3QgdmFsaWRhdGUgPSBhc3luYyAoZG9jdW1lbnQsIHlhbWxTb3VyY2UsIGZpbGVQYXRoLCBvcHRpb25zID0ge30pID0+IHtcbiAgaWYgKCFkb2N1bWVudC5vcGVuYXBpICYmICFkb2N1bWVudC5zd2FnZ2VyICYmICFkb2N1bWVudC4kcmVmKSByZXR1cm4gW107XG5cbiAgY29uc3QgY29uZmlnID0gZ2V0TGludENvbmZpZyhvcHRpb25zKTtcbiAgY29uZmlnLnJ1bGVzLmJ1bmRsZXIgPSAnb2ZmJztcblxuICBjb25zdCBjdHggPSBjcmVhdGVDb250ZXh0KGRvY3VtZW50LCB5YW1sU291cmNlLCBmaWxlUGF0aCwgY29uZmlnKTtcblxuICBjdHguZ2V0UnVsZSA9IGN0eC5nZXRSdWxlLmJpbmQobnVsbCwgY3R4KTtcblxuICBjb25zdCByb290Tm9kZSA9IGN0eC5vcGVuYXBpVmVyc2lvbiA9PT0gMyA/IE9wZW5BUElSb290IDogT0FTMlJvb3Q7XG4gIGF3YWl0IHRyYXZlcnNlTm9kZShkb2N1bWVudCwgcm9vdE5vZGUsIGN0eCk7XG5cbiAgY29uc3QgZmlsdGVyZWQgPSBjdHgucmVzdWx0LmZpbHRlcigobXNnKSA9PiB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBjdHguY3VzdG9tUnVsZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGlmIChtc2cuZnJvbVJ1bGUgPT09IGN0eC5jdXN0b21SdWxlc1tqXSkge1xuICAgICAgICBpZiAoY3R4LmN1c3RvbVJ1bGVzW2pdLmNvbmZpZy5leGNsdWRlUGF0aHMpIHtcbiAgICAgICAgICBjb25zdCBmdWxsUGF0aCA9IGAke21zZy5maWxlfSMvJHttc2cucGF0aC5qb2luKCcvJyl9YDtcbiAgICAgICAgICByZXR1cm4gY3R4LmN1c3RvbVJ1bGVzW2pdLmNvbmZpZy5leGNsdWRlUGF0aHMuaW5kZXhPZihmdWxsUGF0aCkgPT09IC0xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZpbHRlcmVkO1xufTtcblxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlRnJvbVVybCA9IGFzeW5jIChsaW5rLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHNvdXJjZSA9IGF3YWl0IGdldEZpbGUobGluayk7XG4gIGxldCBkb2N1bWVudDtcbiAgdHJ5IHtcbiAgICBkb2N1bWVudCA9IHlhbWwuc2FmZUxvYWQoc291cmNlKTtcbiAgfSBjYXRjaCAoZXgpIHtcbiAgICByZXR1cm4gW2NyZWF0ZVlBTUxQYXJzZUVycm9yKGV4LCB7fSwgbGluaywgc291cmNlLCB0cnVlKV07XG4gIH1cbiAgY29uc3QgdmFsaWRhdGlvblJlc3VsdCA9IGF3YWl0IHZhbGlkYXRlKGRvY3VtZW50LCBzb3VyY2UsIGxpbmssIG9wdGlvbnMpO1xuICByZXR1cm4gdmFsaWRhdGlvblJlc3VsdDtcbn07XG5cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZUZyb21GaWxlID0gYXN5bmMgKGZOYW1lLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHJlc29sdmVkRmlsZU5hbWUgPSBmTmFtZTsgLy8gcGF0aC5yZXNvbHZlKGZOYW1lKTtcbiAgY29uc3QgeyBkb2N1bWVudCwgc291cmNlIH0gPSByZWFkWWFtbChyZXNvbHZlZEZpbGVOYW1lKTtcbiAgY29uc3QgdmFsaWRhdGlvblJlc3VsdCA9IGF3YWl0IHZhbGlkYXRlKGRvY3VtZW50LCBzb3VyY2UsIHJlc29sdmVkRmlsZU5hbWUsIG9wdGlvbnMpO1xuICByZXR1cm4gdmFsaWRhdGlvblJlc3VsdDtcbn07XG4iXX0=