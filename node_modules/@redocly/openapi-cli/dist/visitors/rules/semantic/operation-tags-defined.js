"use strict";

/* eslint-disable no-underscore-dangle */
class OperationTags {
  static get rule() {
    return 'operation-tags-defined';
  }

  constructor() {
    this.globalTagNames = [];
  }

  _readGlobalTags() {
    return {
      onEnter: node => {
        this.globalTagNames = node.tags ? node.tags.map(tag => tag.name) : [];
      }
    };
  }

  _processOperationTags() {
    return {
      onEnter: (node, _, ctx) => {
        if (!node.tags) return [];
        const errors = [];

        for (let i = 0; i < node.tags.length; i++) {
          const tag = node.tags[i];

          if (this.globalTagNames.indexOf(tag) === -1) {
            ctx.path.push('tags');
            ctx.path.push(i);
            errors.push(ctx.createError('Operation tags should be defined in the top level "tags" object.', 'value'));
            ctx.path.pop();
            ctx.path.pop();
          }
        }

        return errors;
      }
    };
  }

  OpenAPIOperation() {
    return this._processOperationTags();
  }

  OAS2Operation() {
    return this._processOperationTags();
  }

  OAS2Root() {
    return this._readGlobalTags();
  }

  OpenAPIRoot() {
    return this._readGlobalTags();
  }

}

module.exports = OperationTags;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92aXNpdG9ycy9ydWxlcy9zZW1hbnRpYy9vcGVyYXRpb24tdGFncy1kZWZpbmVkLmpzIl0sIm5hbWVzIjpbIk9wZXJhdGlvblRhZ3MiLCJydWxlIiwiY29uc3RydWN0b3IiLCJnbG9iYWxUYWdOYW1lcyIsIl9yZWFkR2xvYmFsVGFncyIsIm9uRW50ZXIiLCJub2RlIiwidGFncyIsIm1hcCIsInRhZyIsIm5hbWUiLCJfcHJvY2Vzc09wZXJhdGlvblRhZ3MiLCJfIiwiY3R4IiwiZXJyb3JzIiwiaSIsImxlbmd0aCIsImluZGV4T2YiLCJwYXRoIiwicHVzaCIsImNyZWF0ZUVycm9yIiwicG9wIiwiT3BlbkFQSU9wZXJhdGlvbiIsIk9BUzJPcGVyYXRpb24iLCJPQVMyUm9vdCIsIk9wZW5BUElSb290IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBLE1BQU1BLGFBQU4sQ0FBb0I7QUFDbEIsYUFBV0MsSUFBWCxHQUFrQjtBQUNoQixXQUFPLHdCQUFQO0FBQ0Q7O0FBRURDLEVBQUFBLFdBQVcsR0FBRztBQUNaLFNBQUtDLGNBQUwsR0FBc0IsRUFBdEI7QUFDRDs7QUFFREMsRUFBQUEsZUFBZSxHQUFHO0FBQ2hCLFdBQU87QUFDTEMsTUFBQUEsT0FBTyxFQUFHQyxJQUFELElBQVU7QUFDakIsYUFBS0gsY0FBTCxHQUFzQkcsSUFBSSxDQUFDQyxJQUFMLEdBQVlELElBQUksQ0FBQ0MsSUFBTCxDQUFVQyxHQUFWLENBQWVDLEdBQUQsSUFBU0EsR0FBRyxDQUFDQyxJQUEzQixDQUFaLEdBQStDLEVBQXJFO0FBQ0Q7QUFISSxLQUFQO0FBS0Q7O0FBRURDLEVBQUFBLHFCQUFxQixHQUFHO0FBQ3RCLFdBQU87QUFDTE4sTUFBQUEsT0FBTyxFQUFFLENBQUNDLElBQUQsRUFBT00sQ0FBUCxFQUFVQyxHQUFWLEtBQWtCO0FBQ3pCLFlBQUksQ0FBQ1AsSUFBSSxDQUFDQyxJQUFWLEVBQWdCLE9BQU8sRUFBUDtBQUNoQixjQUFNTyxNQUFNLEdBQUcsRUFBZjs7QUFDQSxhQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdULElBQUksQ0FBQ0MsSUFBTCxDQUFVUyxNQUE5QixFQUFzQ0QsQ0FBQyxFQUF2QyxFQUEyQztBQUN6QyxnQkFBTU4sR0FBRyxHQUFHSCxJQUFJLENBQUNDLElBQUwsQ0FBVVEsQ0FBVixDQUFaOztBQUNBLGNBQUksS0FBS1osY0FBTCxDQUFvQmMsT0FBcEIsQ0FBNEJSLEdBQTVCLE1BQXFDLENBQUMsQ0FBMUMsRUFBNkM7QUFDM0NJLFlBQUFBLEdBQUcsQ0FBQ0ssSUFBSixDQUFTQyxJQUFULENBQWMsTUFBZDtBQUNBTixZQUFBQSxHQUFHLENBQUNLLElBQUosQ0FBU0MsSUFBVCxDQUFjSixDQUFkO0FBQ0FELFlBQUFBLE1BQU0sQ0FBQ0ssSUFBUCxDQUFZTixHQUFHLENBQUNPLFdBQUosQ0FBZ0Isa0VBQWhCLEVBQW9GLE9BQXBGLENBQVo7QUFDQVAsWUFBQUEsR0FBRyxDQUFDSyxJQUFKLENBQVNHLEdBQVQ7QUFDQVIsWUFBQUEsR0FBRyxDQUFDSyxJQUFKLENBQVNHLEdBQVQ7QUFDRDtBQUNGOztBQUNELGVBQU9QLE1BQVA7QUFDRDtBQWZJLEtBQVA7QUFpQkQ7O0FBRURRLEVBQUFBLGdCQUFnQixHQUFHO0FBQ2pCLFdBQU8sS0FBS1gscUJBQUwsRUFBUDtBQUNEOztBQUVEWSxFQUFBQSxhQUFhLEdBQUc7QUFDZCxXQUFPLEtBQUtaLHFCQUFMLEVBQVA7QUFDRDs7QUFFRGEsRUFBQUEsUUFBUSxHQUFHO0FBQ1QsV0FBTyxLQUFLcEIsZUFBTCxFQUFQO0FBQ0Q7O0FBRURxQixFQUFBQSxXQUFXLEdBQUc7QUFDWixXQUFPLEtBQUtyQixlQUFMLEVBQVA7QUFDRDs7QUFuRGlCOztBQXNEcEJzQixNQUFNLENBQUNDLE9BQVAsR0FBaUIzQixhQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5jbGFzcyBPcGVyYXRpb25UYWdzIHtcbiAgc3RhdGljIGdldCBydWxlKCkge1xuICAgIHJldHVybiAnb3BlcmF0aW9uLXRhZ3MtZGVmaW5lZCc7XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmdsb2JhbFRhZ05hbWVzID0gW107XG4gIH1cblxuICBfcmVhZEdsb2JhbFRhZ3MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uRW50ZXI6IChub2RlKSA9PiB7XG4gICAgICAgIHRoaXMuZ2xvYmFsVGFnTmFtZXMgPSBub2RlLnRhZ3MgPyBub2RlLnRhZ3MubWFwKCh0YWcpID0+IHRhZy5uYW1lKSA6IFtdO1xuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgX3Byb2Nlc3NPcGVyYXRpb25UYWdzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvbkVudGVyOiAobm9kZSwgXywgY3R4KSA9PiB7XG4gICAgICAgIGlmICghbm9kZS50YWdzKSByZXR1cm4gW107XG4gICAgICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUudGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IHRhZyA9IG5vZGUudGFnc1tpXTtcbiAgICAgICAgICBpZiAodGhpcy5nbG9iYWxUYWdOYW1lcy5pbmRleE9mKHRhZykgPT09IC0xKSB7XG4gICAgICAgICAgICBjdHgucGF0aC5wdXNoKCd0YWdzJyk7XG4gICAgICAgICAgICBjdHgucGF0aC5wdXNoKGkpO1xuICAgICAgICAgICAgZXJyb3JzLnB1c2goY3R4LmNyZWF0ZUVycm9yKCdPcGVyYXRpb24gdGFncyBzaG91bGQgYmUgZGVmaW5lZCBpbiB0aGUgdG9wIGxldmVsIFwidGFnc1wiIG9iamVjdC4nLCAndmFsdWUnKSk7XG4gICAgICAgICAgICBjdHgucGF0aC5wb3AoKTtcbiAgICAgICAgICAgIGN0eC5wYXRoLnBvcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgT3BlbkFQSU9wZXJhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvY2Vzc09wZXJhdGlvblRhZ3MoKTtcbiAgfVxuXG4gIE9BUzJPcGVyYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb2Nlc3NPcGVyYXRpb25UYWdzKCk7XG4gIH1cblxuICBPQVMyUm9vdCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZEdsb2JhbFRhZ3MoKTtcbiAgfVxuXG4gIE9wZW5BUElSb290KCkge1xuICAgIHJldHVybiB0aGlzLl9yZWFkR2xvYmFsVGFncygpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gT3BlcmF0aW9uVGFncztcbiJdfQ==